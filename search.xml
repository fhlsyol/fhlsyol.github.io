<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL基础 2</title>
      <link href="/2019/12/24/day35-sql2/"/>
      <url>/2019/12/24/day35-sql2/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL2"><a href="#SQL2" class="headerlink" title="SQL2"></a>SQL2</h1><h3 id="1-ER图"><a href="#1-ER图" class="headerlink" title="1. ER图"></a>1. ER图</h3><p>ER图也称实体关系图</p><p>是通过图表的形式来表示数据库中表和字段以及表和表之间的关系</p><p>在NAVIcat等可视化工具里可以通过点击以下按钮来进入ER图界面</p><p><img src="day35_SQL2.assets/Snipaste_2019-12-24_09-43-25.png" alt=""></p><p>如图：</p><p><img src="day35_SQL2.assets/Snipaste_2019-12-24_09-45-13.png" alt=""></p><p>上图是一张还没有建立连接的ER图(不标准)</p><p>标准的ER图：</p><p><img src="day35_SQL2.assets/QQ%E5%9B%BE%E7%89%8720191224100241.png" alt=""></p><p><img src="day35_SQL2.assets/Snipaste_2019-12-24_11-11-18.png" alt=""></p><p>表和表之间的关系主要有四种：</p><p>一对一、一对多、多对一、多对多</p><h3 id="2-外键约束"><a href="#2-外键约束" class="headerlink" title="2. 外键约束"></a>2. 外键约束</h3><p>让字段的值取值范围在另外一张表的主键中</p><p>添加外键约束：</p><ul><li>保证当前表中有一个字段能够保存另外一张表的主键</li><li>添加外键约束</li></ul><p>不同对应关系外键的添加要求不同：</p><ul><li>一对一：可以添加到任意一张表中</li><li>一对多和多对一：添加到多的表中</li><li>多对多：两张表没有办法建立多对多的对应关系，需要第三张表才行</li></ul><h3 id="3-外键约束的添加和删除"><a href="#3-外键约束的添加和删除" class="headerlink" title="3. 外键约束的添加和删除"></a>3. 外键约束的添加和删除</h3><h5 id="1）创建表或者添加字段的时候直接在字段后面添加约束"><a href="#1）创建表或者添加字段的时候直接在字段后面添加约束" class="headerlink" title="1）创建表或者添加字段的时候直接在字段后面添加约束"></a>1）创建表或者添加字段的时候直接在字段后面添加约束</h5><p><img src="day35_SQL2.assets/Snipaste_2019-12-24_11-01-09.png" alt=""></p><h5 id="2）通过修改表的表示添加和删除约束"><a href="#2）通过修改表的表示添加和删除约束" class="headerlink" title="2）通过修改表的表示添加和删除约束"></a>2）通过修改表的表示添加和删除约束</h5><p>先专门新建一列</p><pre class=" language-mysql"><code class="language-mysql">-- 在学生表中新建一列用来保存学院归属alter table tb_stuent add column colid int comment '所在学院';</code></pre><ul><li><p>主键约束/唯一约束</p><p>  添加：</p><p>  <code>alter table 表名 add constraint 约束索引名 约束名(字段);</code></p><p>  给指定字段添加指定约束(只能添加唯一约束和主键约束)</p><p>  栗子：</p><pre class=" language-mysql"><code class="language-mysql">  alter table tb_stuent add constraint unique_colid unique (colid);</code></pre><p>  删除：</p><p>  <code>alter table 表名 drop index 约束索引名;</code></p><p>  删除指定索引的约束</p></li></ul><ul><li><p>外键约束</p><p>添加：</p><p><code>alter table 表1名 add constraint 约束索引名 foreign key (字段1) references 表2 (字段2)</code></p><p>给表1中的字段1添加外键约束，并且字段1的值依赖表2中的字段2</p><p>注意：字段1和字段2不能同名！</p><p>栗子：</p><pre class=" language-mysql"><code class="language-mysql">alter table tb_student add constraint fk_collid_coll foreign key (colid) references tb_college (collid);</code></pre><p>删除：</p><p><code>alter table tb_student drop foreign key fk_collid_coll;</code></p></li></ul><p>栗子：</p><pre class=" language-mysql"><code class="language-mysql">-- 给学生添加所在学院的外键约束ALTER TABLE tb_student ADD COLUMN colid INT COMMENT '所在学院';ALTER TABLE tb_student ADD CONSTRAINT fk_collid_stu FOREIGN KEY (colid) REFERENCES tb_college (collid);-- 给老师添加所在学院的外键约束ALTER TABLE tb_teacher ADD COLUMN cid INT COMMENT '所在学院';ALTER TABLE tb_teacher ADD CONSTRAINT fk_cid_tea FOREIGN KEY (cid) REFERENCES tb_college (collid);-- 给课程添加上课老师的外键约束ALTER TABLE tb_course ADD COLUMN tid INT COMMENT '上课老师';ALTER TABLE tb_course ADD CONSTRAINT fk_tid_cou FOREIGN KEY (tid) REFERENCES tb_teacher (teaid);</code></pre><p>结果：</p><p><img src="day35_SQL2.assets/Snipaste_2019-12-24_11-29-48.png" alt=""></p><ul><li><p>多对多关系的外键约束</p><p>多对多必须用第三张表来关联</p><pre class=" language-mysql"><code class="language-mysql">-- 先新建一个表，新建的时候关联外键create table if not exists tb_record(reid int auto_increment comment '选课记录编号',sid int comment '学生的外键',cid int comment '课程外键',redate date comment '选课日期',score float comment '分数',primary key (reid),foreign key (sid) references tb_student (stuid),foreign key (cid) references tb_course (couid));</code></pre></li></ul><h3 id="4-高级查询"><a href="#4-高级查询" class="headerlink" title="4. 高级查询"></a>4. 高级查询</h3><h5 id="1）去重"><a href="#1）去重" class="headerlink" title="1）去重"></a>1）去重</h5><pre class=" language-mysql"><code class="language-mysql">select distinct 字段名 from 表名;  -- 获取指定字段的值并且去重-- 栗子：select distinct stuage from t_student;</code></pre><h5 id="2）限制和分页"><a href="#2）限制和分页" class="headerlink" title="2）限制和分页"></a>2）限制和分页</h5><p>限制：</p><pre class=" language-mysql"><code class="language-mysql">select * from 表名 limit N;  -- 查询时只获取前N条的数据-- 栗子：select * from tb_stuent limit 5;</code></pre><p>分页(偏移)：</p><pre class=" language-mysql"><code class="language-mysql">select * from 表名 limit N offset M;  -- 查询时跳过前M条数据，获取N条数据select * from 表名 limit M,N;  -- 作用同上，第二种写法而已-- 栗子：select * from tb_stuent limit 5 offset 3;  -- 获取4到8条记录select * from tb_stuent order by score desc limit 3;  -- 获取全班成绩前三名的学生的信息</code></pre><h5 id="3）聚合"><a href="#3）聚合" class="headerlink" title="3）聚合"></a>3）聚合</h5><p>MySQL中的一些函数：</p><p><code>max()</code> <code>min()</code> <code>sum()</code> <code>avg()</code> <code>count()</code></p><p>最大值，最小值，求和，求平均值，计数</p><p>若数据中有空值，则不会计算在内 (比如说没有记录成绩的同学不会拉低全班平均分)</p><pre class=" language-mysql"><code class="language-mysql">select max(score) as '最高分' from tb_record;  -- 获取record表中的最高分数-- 其余函数用法同上</code></pre><h5 id="4）分组"><a href="#4）分组" class="headerlink" title="4）分组"></a>4）分组</h5><p><code>select 聚合操作 from 表名 group by (字段);</code></p><p>按指定字段的值对表进行分组，然后对每个分组进行聚合操作</p><p>分组规则是指定字段值相同的作为一组</p><p>注意：分组后，除了分组字段以外，其他字段只能聚合操作</p><p>栗子：</p><pre class=" language-mysql"><code class="language-mysql">select sid, avg(score) from tb_record group by (sid);  -- 获取每个学生的平均分select cid, avg(score) from tb_record group by (cid);  -- 获取每个学科的平均分select sid, count(cid) from tb_record group by (sid);  -- 获取每个学生选课的数量</code></pre><p>对分组后的数据加条件，不能用<code>where</code>，而是用<code>having</code></p><p>栗子：</p><pre class=" language-mysql"><code class="language-mysql">-- 获取选了两门课以上的学生的id (分组+聚合)select sid, count(cid) from tb_record group by (sid) having count(cid)>2;-- 或者select sid, count(cid) as c_course from tb_record group by (sid) having c_course>2;</code></pre><h5 id="5）子查询："><a href="#5）子查询：" class="headerlink" title="5）子查询："></a>5）子查询：</h5><p>将一个查询的结果作为另外一个查询的条件或者查询对象</p><ul><li><p>第一种子查询：</p><p>  将查询结果作为另外一个查询的条件</p><p>  直接上栗子：</p><pre class=" language-mysql"><code class="language-mysql">  -- 获取成绩最高的所有学生的id  -- 将select max(score) as '最高分' from tb_record;作为条件  select sid from tb_record where score=(select max(score) as '最高分' from tb_record);</code></pre></li></ul><pre><code>-- 获取选了两门课程以上的学生的姓名select stuname from tb_student where stuid in (select sid from tb_record group by (sid) having count(cid)&gt;2);```</code></pre><ul><li><p>第二种子查询：</p><p>将一个查询的结果作为另一个查询的查询对象</p><p>注意：必须重命名！！！</p><p>直接上栗子：</p><pre class=" language-mysql"><code class="language-mysql">-- 将一个查询的结果作为另一个查询的对象select stuname from (select * from tb_student limit 4, 5;) as t1;  -- 这里必须重命名！</code></pre></li></ul><h5 id="6）-连接查询："><a href="#6）-连接查询：" class="headerlink" title="6） 连接查询："></a>6） 连接查询：</h5><p>又叫联表查询、联接查询等</p><p>同时查询多张表</p><p><code>select * from 表名1, 表名2, 表名3, ... 连接条件 查询条件;</code></p><p>注意：如果既有连接条件，又有查询条件，查询条件必须放在连接条件的后面</p><p>栗子：</p><pre class=" language-mysql"><code class="language-mysql">-- 查询所有学生的名字和对应的学院名字：select stuname, collname from tb_student, tb_college;  -- 如果直接执行，会打印一个笛卡尔集，所以要添加连接条件，如下：select stuname, collname from tb_student, tb_college where tb_student.colid=tb_college.collid;-- 查询所有学生每个学科的成绩：xxx(学生) xxx(学科名) xx(分数)select stuname, couname, score from tb_student, tb_course, tb_record where tb_student.stuid=tb_record.sid and tb_course.couid=tb_record.cid;-- 查询所有大于70分的学生的学科成绩：select stuname, couname, score from tb_student, tb_course, tb_record where tb_student.stuid=tb_record.sid and tb_course.couid=tb_record.cid and score>70;</code></pre><h3 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h3><p>先上自己做的：</p><pre class=" language-mysql"><code class="language-mysql">-- 查询所有学生信息SELECT * FROM tb_student;-- 查询所有课程名称及学分SELECT couname, coucredit FROM tb_course;-- 查询所有学生的姓名和性别SELECT stuname AS '姓名', IF(stusex, '男', '女') AS '性别' FROM tb_student;-- 查询所有女学生的姓名和出生日期SELECT stuname, stubirth FROM tb_student WHERE stusex=0;-- 查询所有80后学生的姓名、性别和出生日期SELECT stuname AS '姓名', IF(stusex, '男', '女') AS '性别', stubirth AS '生日' FROM tb_student WHERE stubirth>'1979-12-31';-- 查询姓"杨"的学生姓名和性别SELECT stuname AS '姓名', IF(stusex, '男', '女') AS '性别' FROM tb_student WHERE stuname LIKE '杨%';-- 查询姓"杨"名字两个字的学生姓名和性别SELECT stuname AS '姓名', IF(stusex, '男', '女') AS '性别' FROM tb_student WHERE stuname LIKE '杨_';-- 查询姓"杨"名字三个字的学生姓名和性别SELECT stuname AS '姓名', IF(stusex, '男', '女') AS '性别' FROM tb_student WHERE stuname LIKE '杨__';-- 查询名字中有"不"字或"嫣"字的学生的姓名SELECT stuname AS '姓名' FROM tb_student WHERE stuname LIKE '%不%' OR stuname LIKE '%嫣%';-- 查询没有录入家庭住址的学生姓名SELECT stuname AS '姓名' FROM tb_student WHERE stuaddr IS NULL;-- 查询录入了家庭住址的学生姓名SELECT stuname AS '姓名' FROM tb_student WHERE stuaddr IS NOT NULL;-- 查询男学生的姓名和生日按年龄从大到小排列SELECT stuname AS '姓名', stubirth AS '生日' FROM tb_student WHERE stusex=1 ORDER BY stubirth;-- 查询年龄最大的学生的出生日期SELECT MIN(stubirth) AS '年龄最大学生的生日'  FROM tb_student;-- 查询年龄最小的学生的出生日期SELECT MAX(stubirth) AS '年龄最小学生的生日'  FROM tb_student;-- 查询男女学生的人数SELECT COUNT(stuid) AS '人数', IF(stusex, '男', '女') AS '性别' FROM tb_student GROUP BY stusex;-- 查询课程编号为1111的课程的平均成绩SELECT AVG(score) AS '1111课程平均成绩' FROM tb_record WHERE cid=1111;-- 查询学号为1001的学生所有课程的平均分SELECT AVG(score) AS '1001学生平均成绩' FROM tb_record WHERE sid=1001;-- 查询每个学生的学号和平均成绩SELECT sid AS '学号', AVG(score) AS '平均成绩' FROM tb_record GROUP BY sid;-- 查询平均成绩大于等于90分的学生的学号和平均成绩SELECT sid AS '学号', AVG(score) AS '平均成绩' FROM tb_record GROUP BY sid HAVING AVG(score)>=90;-- 查询选了两门以上的课程的学生姓名SELECT stuname AS '姓名' FROM tb_student WHERE stuid in (SELECT sid FROM tb_record GROUP BY sid HAVING COUNT(cid)>2);-- 查询学生姓名、课程名称以及成绩SELECT stuname AS '姓名', couname AS '课程名称', score AS '成绩' FROM tb_student, tb_course, tb_record WHERE tb_student.stuid=tb_record.sid AND tb_course.couid=tb_record.cid;-- 查询学生姓名、课程名称以及成绩按成绩从高到低查询第11-15条记录SELECT stuname AS '姓名', couname AS '课程名称', score AS '成绩' FROM tb_student, tb_course, tb_record WHERE tb_student.stuid=tb_record.sid AND tb_course.couid=tb_record.cid ORDER BY score DESC LIMIT 10,5;-- 查询选课学生的姓名和平均成绩SELECT stuname AS '姓名', AVG(score) AS '平均成绩' FROM tb_student, tb_record WHERE tb_student.stuid=tb_record.sid GROUP BY stuid;-- 查询每个学生的姓名和选课数量SELECT stuname AS '姓名', COUNT(cid) AS '选课数量' FROM tb_student, tb_record WHERE tb_student.stuid=tb_record.sid GROUP BY stuid;</code></pre><p>老师答案：</p><pre class=" language-mysql"><code class="language-mysql">-- 查询所有学生信息SELECT * from tb_student;-- 查询所有课程名称及学分(映射)SELECT couname, coucredit FROM tb_course;-- 查询所有学生的姓名和性别(映射)SELECT stuname, if(stusex,'男', '女') as gender FROM tb_student;-- 查询所有女学生的姓名和出生日期SELECT stuname, stubirth FROM tb_student where stusex=0;-- 查询所有80后学生的姓名、性别和出生日期SELECT stuname, if(stusex, '男', '女') as gender, stubirth FROM tb_student WHERE stubirth >= '1980-1-1' and stubirth <= '1989-12-31';-- 查询姓"杨"的学生姓名和性别(模糊)SELECT stuname, if(stusex, '男', '女') as gender FROM tb_student where stuname like '杨%';-- 查询姓"杨"名字两个字的学生姓名和性别SELECT stuname, if(stusex, '男', '女') as gender FROM tb_student where stuname like '杨_';-- 查询姓"杨"名字三个字的学生姓名和性别SELECT stuname, if(stusex, '男', '女') as gender FROM tb_student where stuname like '杨__';-- 查询名字中有"不"字或"嫣"字的学生的姓名SELECT stuname FROM tb_student where stuname like '%不%' or stuname like '%嫣%';-- 查询没有录入家庭住址的学生姓名SELECT stuname FROM tb_student WHERE stuaddr is NULL;-- 查询录入了家庭住址的学生姓名SELECT stuname FROM tb_student WHERE stuaddr is not NULL;-- 查询学生选课的所有日期(去重)SELECT distinct redate FROM tb_record;-- 查询学生的家庭住址(去重)select distinct stuaddr FROM tb_student;-- 查询男学生的姓名和生日按年龄从大到小排列(排序)SELECT stuname, stubirth FROM tb_student where stusex=1 ORDER BY stubirth;-- 查询年龄最大的学生的出生日期(聚合)SELECT min(stubirth) FROM tb_student;-- 查询年龄最小的学生的出生日期(聚合)SELECT max(stubirth) FROM tb_student;-- 查询男女学生的人数(分组和聚合)SELECT if(stusex, '男生', '女生') as gender, count(stuid) as c_stu FROM tb_student GROUP BY (stusex);-- 查询课程编号为1111的课程的平均成绩-- select avg(score) FROM tb_record GROUP BY (cid) having cid=1111;SELECT avg(score) FROM tb_record WHERE cid=1111;-- 查询学号为1001的学生所有课程的平均分SELECT avg(score) FROM tb_record WHERE sid=1001;-- 查询每个学生的学号和平均成绩(分组和聚合)SELECT sid, avg(score) FROM tb_record GROUP BY (sid);-- 查询平均成绩大于等于90分的学生的学号和平均成绩(分组和聚合)SELECT sid, avg(score) as avg_score FROM tb_record GROUP BY (sid) having avg_score>=90;-- 查询年龄最大的学生的姓名(子查询)-- select min(stubirth) from tb_student;SELECT stuname FROM tb_student where stubirth=(select min(stubirth) from tb_student);-- 查询年龄最大的学生姓名和年龄SELECT stuname, DATEDIFF(CURDATE(),stubirth) div 365 as age FROM tb_student where stubirth=(select min(stubirth) from tb_student);-- 查询选了两门以上的课程的学生姓名(子查询，分组，聚合)-- select sid FROM tb_record GROUP BY (sid) HAVING count(cid)>2;select stuname FROM tb_student where stuid in (select sid FROM tb_record GROUP BY (sid) HAVING count(cid)>2);-- 查询学生姓名、课程名称以及成绩(连接查询)select stuname, couname, score FROMtb_student,tb_course,tb_recordwhere tb_student.stuid=tb_record.sid and tb_course.couid=tb_record.cid;-- 查询学生姓名、课程名称以及成绩按成绩从高到低查询第11-15条记录select stuname, couname, score FROMtb_student,tb_course,tb_recordwhere tb_student.stuid=tb_record.sid and tb_course.couid=tb_record.cidORDER BY score DESCLIMIT 10, 5;-- 查询选课学生的姓名和平均成绩(连接查询，子查询)select stuname, avg(score) FROM tb_student as t1, tb_record as t2where t1.stuid=t2.sid GROUP BY(sid);-- 方法2：-- select sid, avg(score) as avg_s FROM tb_record GROUP BY (sid);select stuname, avg_s FROMtb_student as t1,(select sid, avg(score) as avg_s FROM tb_record GROUP BY (sid)) as t2where t1.stuid=t2.sid;-- 查询每个学生的姓名和选课数量select stuname, count(cid) FROMtb_student as t1,tb_record as t2WHERE t1.stuid=t2.sid GROUP BY (sid);-- select sid, COUNT(cid) as count_c FROM tb_record GROUP BY (sid);SELECT stuname, count_c FROM tb_student as t1,(select sid, COUNT(cid) as count_c FROM tb_record GROUP BY (sid)) as t2WHERE t1.stuid=t2.sid;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL基础 1</title>
      <link href="/2019/12/23/day34-sql1/"/>
      <url>/2019/12/23/day34-sql1/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL基础-1"><a href="#SQL基础-1" class="headerlink" title="SQL基础 1"></a>SQL基础 1</h1><p>sql又叫结构化查询语言，分为三大类：DDL(数据定义语言)、DML(数据操作语言)、DCL(数据控制语言)</p><ul><li><p>DDL：</p><pre><code>create    (创建数据库和表)drop    (删除数据库和表)alter    (修改表)</code></pre></li></ul><ul><li><p>DML：</p><pre><code>insert    (增)delete    (删)update    (改)select    (查)</code></pre></li></ul><ul><li><p>DCL：</p><pre><code>grant    (授权)revoke    (召回授权)</code></pre></li></ul><ul><li><p>注意：</p><pre class=" language-sql"><code class="language-sql">  <span class="token comment" spellcheck="true">-- sql的注释是再注释前加--</span>  <span class="token comment" spellcheck="true">-- sql中sql的关键字不区分大小写</span>  <span class="token comment" spellcheck="true">-- sqli语句每句结束后都要加分号！！！</span></code></pre></li></ul><h2 id="一-DDL-数据定义语言"><a href="#一-DDL-数据定义语言" class="headerlink" title="一. DDL (数据定义语言)"></a>一. DDL (数据定义语言)</h2><h3 id="1-数据库的操作"><a href="#1-数据库的操作" class="headerlink" title="1. 数据库的操作"></a>1. 数据库的操作</h3><h5 id="1）创建数据库"><a href="#1）创建数据库" class="headerlink" title="1）创建数据库"></a>1）创建数据库</h5><ul><li><p><code>create database 数据库名称;</code></p><p>创建指定数据库，如果这个数据库已经存在，会报错</p></li><li><p><code>create database if not exists 数据库名称;</code></p><p>当指定数据库不存在的时候，创建指定数据库</p></li><li><p><code>create database if not exists 数据库名称 default charset utf8;</code></p><p>创建数据库的时候设置字符集编码方式为utf-8，让数据库支持中文数据的存储</p><p>注意：这里要写<code>utf8</code>，而不是<code>utf-8</code>！！！</p></li></ul><h5 id="2）删除数据库"><a href="#2）删除数据库" class="headerlink" title="2）删除数据库"></a>2）删除数据库</h5><ul><li><p><code>drop database 数据库名称;</code></p><p>删除指定数据库，若不存在则报错</p></li></ul><ul><li><p><code>drop database if exists 数据库名称;</code></p><p>当指定数据库存在时，删除指定数据库</p></li></ul><h5 id="3）切换-使用数据库"><a href="#3）切换-使用数据库" class="headerlink" title="3）切换 / 使用数据库"></a>3）切换 / 使用数据库</h5><ul><li><p><code>use 数据库;</code></p><p>切换 / 使用指定数据库；切换后所有数据库相关操作都是针对这个数据库</p></li></ul><h3 id="B-表的操作"><a href="#B-表的操作" class="headerlink" title="B. 表的操作"></a>B. 表的操作</h3><h5 id="1）创建表-数据库文件是通过表来存储数据的"><a href="#1）创建表-数据库文件是通过表来存储数据的" class="headerlink" title="1）创建表(数据库文件是通过表来存储数据的)"></a>1）创建表(数据库文件是通过表来存储数据的)</h5><ul><li><p><code>creat table 表名;</code></p><p><code>creat table if not exists 表名(字段名1 类型名1 约束1, 字段名2 类型名2 约束2, ...);</code></p><p>注意：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 表名：开发者自己命名，见名知意，一般需要加前缀t_/tb_表示表</span><span class="token comment" spellcheck="true">-- 字段名：开发者自己命名，见名知意；</span>    <span class="token comment" spellcheck="true">-- 注意：字段一定要有一个字段来作为主键(可以表示唯一一条记录)；</span>    <span class="token comment" spellcheck="true">-- 主键不能为空，并且是唯一的，并且数据类型是整型</span><span class="token comment" spellcheck="true">-- 类型名：必须是当前数据库支持的数据类型</span>    <span class="token comment" spellcheck="true">-- MySQL中常用的数据类型：</span>    <span class="token comment" spellcheck="true">-- int                (整型)</span>    <span class="token comment" spellcheck="true">-- float            (浮点型)</span>    <span class="token comment" spellcheck="true">-- varchar            (不定长字符串)</span>    <span class="token comment" spellcheck="true">-- text                (定长字符串)</span>    <span class="token comment" spellcheck="true">-- bit                (布尔)</span>    <span class="token comment" spellcheck="true">-- date/datetime    (日期和时间)</span>    <span class="token comment" spellcheck="true">-- ...</span><span class="token comment" spellcheck="true">-- 约束：</span>    <span class="token comment" spellcheck="true">-- not null            (非空约束)</span>    <span class="token comment" spellcheck="true">-- unique            (唯一约束)</span>    <span class="token comment" spellcheck="true">-- default            (默认值约束)</span>    <span class="token comment" spellcheck="true">-- primary key        (主键约束)</span>    <span class="token comment" spellcheck="true">-- foreign            (外键约束)</span>    <span class="token comment" spellcheck="true">-- auto_increment    (自动增长)</span>    <span class="token comment" spellcheck="true">-- ...</span>    <span class="token comment" spellcheck="true">-- 约束可以没有，也可以有多个</span></code></pre></li></ul><ul><li><p>栗子：</p><pre class=" language-mysql"><code class="language-mysql">  CREATE DATABASE if not EXISTS school DEFAULT charset utf8;  USE school;  CREATE TABLE IF NOT EXISTS tb_stuent  (  stuid INT PRIMARY KEY AUTO_INCREMENT,     -- 主键也可以如下设置  stuname VARCHAR(20) NOT NULL,  stubirth DATE,  stugender BIT DEFAULT 1,  stutel VARCHAR(11) UNIQUE,  -- PRIMARY KEY (stuid)    -- 设置主键的另外一种方式  );</code></pre></li></ul><h5 id="2）删除表"><a href="#2）删除表" class="headerlink" title="2）删除表"></a>2）删除表</h5><p><code>drop table if exists 表名;</code></p><p>删除指定表</p><h5 id="3）-修改表"><a href="#3）-修改表" class="headerlink" title="3） 修改表"></a>3） 修改表</h5><ul><li><p>添加字段</p><p><code>alter table 表名 add column 字段名 字段类型 字段约束;</code></p><p>添加多个可以如下：</p><pre class=" language-mysql"><code class="language-mysql">ALTER TABLE tb_stuent ADD COLUMN (stuaddr VARCHAR(200),stutest INT);</code></pre></li></ul><ul><li><p>删除字段</p><p><code>alter table 表名 drop column 字段名;</code></p></li></ul><ul><li><p>修改字段名</p><p><code>alter table 表名 change 原字段 新字段 新的类型;</code></p></li></ul><h2 id="二-DML-数据操作语言"><a href="#二-DML-数据操作语言" class="headerlink" title="二. DML (数据操作语言)"></a>二. DML (数据操作语言)</h2><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><h5 id="1-增"><a href="#1-增" class="headerlink" title="1. 增"></a>1. 增</h5><ul><li><p><code>insert into 表名 values(值1, 值2, 值3, ...);</code></p><p>按照表中字段的顺序依次给每个字段添加值</p><pre class=" language-mysql"><code class="language-mysql">-- 补充：    -- 字符串            用引号引起来    -- 数字             直接写    -- MySQL中的日期(date)        -- 日期字符串    (如'2019-11-11')        -- 当前日期         date(now())        -- 当前年          year(now())        -- 当前月          month(now())        -- ...    -- bit(布尔)        1或0</code></pre></li></ul><ul><li><p><code>insert into 表名 (字段名1, 字段名2, ...) values(值1, 值2, ...)；</code></p><p>以指定的顺序给指定的字段添加值</p></li></ul><ul><li><p><code>insert into 表名 (字段名1, 字段名2, ...) values (值11, 值12, ...), (值21, 值22, ...), ...;</code></p><p>以指定的顺序给指定的字段同时添加多个值</p><p>栗子：</p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO tb_stuent VALUES (1001, '李云龙', '1995-09-01', 1, '15311111111');INSERT INTO tb_stuent (name, birth, tel) VALUES('楚云飞', '1995-09-01', '15322222222'),('张大彪', '1995-09-01', '15344444444'),('赵刚', '1995-01-01', '15333333333'),('魏大勇', '1995-04-01', '15355555555'),('段鹏', '1995-06-01', '15366666666'),('丁伟', '1991-07-01', '15377777777'),('孔捷', '1990-09-23', '15388888888'),('常乃超', '1985-11-24', '15399999999'),('王友胜', '1988-05-11', '15300000000'),('二柱子', '1977-03-08', '19911111111'),('二营长', '1999-06-14', '19922222222'),('孙德胜', '1998-05-11', '19933333333'),('邢志国', '1969-09-27', '19944444444'),('朱子明', '1979-04-13', '19955555555'),('谢宝庆', '1988-07-01', '19966666666'),('钱伯钧', '2000-01-01', '19977777777');INSERT INTO tb_stuent (name, birth, tel, gender) VALUES('秀芹', '1995-09-01', '18911111111', 0),('白鹿', '1991-03-01', '18922222222', 0),('冯楠', '1994-01-01', '18933333333', 0),('田雨', '1998-01-01', '18944444444', 0);</code></pre></li></ul><h5 id="2-删"><a href="#2-删" class="headerlink" title="2. 删"></a>2. 删</h5><ul><li><p><code>delete from 表名;</code></p><p>删除当前表中的所有记录 (清空表)</p></li></ul><ul><li><p><code>delete from 表名 where 条件;</code></p><p>删除所有满足条件的记录</p><pre class=" language-mysql"><code class="language-mysql">-- sql的条件语句的写法(筛选)：    -- 比较运算：        -- =                (等于)        -- <>                (不等于)        -- <, >, <=, >=     (同数学)    -- 逻辑运算：        -- and                (逻辑与)        -- or                (逻辑或)        -- not                (逻辑非)    -- 集合运算：        -- in                (包含)    -- 区间判断：        -- between A and b    (A到B之间)    -- 空值判断：        -- is null            (空)        -- is not null        (非空)    -- 筛选判断(针对字符串)：        -- like ...</code></pre><p>栗子：</p><pre class=" language-mysql"><code class="language-mysql">delete from 表名 where id>1014 and gendere=0;-- 删除id大于1014的，性别为0的所有记录delete from 表名 where name in ('李云龙', '田雨', '秀芹');-- 删除名字是集合里的元素的所有记录(相当于or语句的简单写法)delete from 表名 where birth between '1960-01-01' and '1980-12-31';-- 删除出生日期是这两个时间之间的所有记录delete from 表名 where tel is null;-- 删除电话为空的所有记录delete from 表名 where name like '张%'-- 删除姓张的所有记录-- % 通配符，表示任意个任意字符-- _ 通配符，表示单个任意字符</code></pre></li></ul><h5 id="3-改"><a href="#3-改" class="headerlink" title="3. 改"></a>3. 改</h5><ul><li><p><code>update 表名 set 字段1=新值1, 字段2=新值2, ...;</code></p><p>将指定表中 <strong>所有记录</strong> 中指定的字段修改成指定的值</p></li></ul><ul><li><p><code>update 表名 set 字段1=新值1, 字段2=新值2, ... where 条件;</code></p><p>将 <strong>满足条件的记录</strong> 的指定字段设置为指定的值</p></li></ul><h5 id="4-查"><a href="#4-查" class="headerlink" title="4. 查"></a>4. 查</h5><ul><li><p><code>select * from 表名</code></p><p>获取指定表中所有的记录中的所有字段的数据</p></li></ul><ul><li><p><code>select 字段1, 字段2, 字段3, ... from 表名;</code></p><p>映射</p><p>获取表中所有记录的指定字段的数据</p></li></ul><ul><li><p><code>select 字段名1 as &#39;新字段名1&#39;, 字段2, 字段3 from 表名;</code></p><p>列重名</p><p>as可以省略</p><p>获取指定字段的数据同时，对取出来的数据的指定列重命名</p></li></ul><ul><li><p>结果重新赋值 (主要针对布尔)</p><ul><li><p><code>select if(字段, 值1, 值2) from 表名</code></p><p>如果if中对应的字段的值是1，则取出来重新赋值为值1，否则赋值为值2</p><p>注意：这样的写法是MySQL特有的写法</p><p>栗子：</p><pre class=" language-mysql"><code class="language-mysql">select name, if(gender, '男', '女') as '性别' from 表名;-- 获取姓名和性别，性别是1的重新赋值为'男'</code></pre></li></ul></li></ul><ul><li><p><code>select case 字段 when 值 then 新值1 else 新值2 end</code></p><p>这是sql的通用写法</p><p>栗子：</p><pre class=" language-mysql"><code class="language-mysql">select name, case stugender when 1 then '男' else '女' end as '性别' from 表名;-- 获取姓名和性别，性别是1的重新赋值为'男'</code></pre></li></ul><ul><li><p>列合并 (查询的时候将多个字段合并成一个数据返回结果)</p><p><code>select concat(字段1, 字段2, ...) from 表名;</code></p><pre class=" language-mysql"><code class="language-mysql">select concat(name, id) as '姓名学号' from 表名;-- 将姓名和学号合并成一列，并重命名</code></pre></li></ul><ul><li><p>筛选</p><p>上面的查询语法的后面都可以加<code>where 条件</code>对记录进行筛选</p><p>如： <code>select * from 表名 where 条件;</code></p><p>栗子：</p><pre class=" language-mysql"><code class="language-mysql">select name, tel from 表名 where gender=0-- 获取所有女生的姓名和电话号码</code></pre></li></ul><ul><li><p>对查询结果进行排序</p><p>在查询语法的后面加<code>order by 字段;</code></p><p>将查询结果按指定字段的值从小到大进行排序</p><pre class=" language-mysql"><code class="language-mysql">select * from 表名 order by birth;-- 按出生日期从早到晚排序select * from 表名 where gender=1 order by birth;-- 把所有的男生按出生日期从早到晚排序</code></pre></li></ul><p>  <code>order by 字段 asc;</code></p><p>  从小到大排序，可以省略 (默认排序方式)</p><p>  <code>order by 字段 desc;</code></p><p>  从大到小排序</p><p>  多排序：</p><p>  按顺序写多个字段即可</p><p>  栗子：</p><pre class=" language-mysql"><code class="language-mysql">  select * from 表名 order by gender, birth desc;  -- 先按性别排序，然后性别相同的记录当中再按生日排序</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web前端基础</title>
      <link href="/2019/12/01/day21-web-qian-duan-ji-chu/"/>
      <url>/2019/12/01/day21-web-qian-duan-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><h3 id="1-web-标准"><a href="#1-web-标准" class="headerlink" title="1. web 标准"></a>1. web 标准</h3><p>web标准是万维网指定的网页开发标准，主要包含三类：</p><table><thead><tr><th align="left">标准</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">结构标准</td><td align="left">html(决定网页中的内容)</td></tr><tr><td align="left">表现标志</td><td align="left">CSS(决定网页中内容的布局和样式)</td></tr><tr><td align="left">行为标准</td><td align="left">JavaScript(决定网页内容动态优化)</td></tr></tbody></table><h3 id="2-认识html"><a href="#2-认识html" class="headerlink" title="2. 认识html"></a>2. 认识html</h3><p>html又叫超文本标记语言(和markdown一样)</p><p>一个网页本质就是一个html文件</p><h3 id="3-html文件基本结构"><a href="#3-html文件基本结构" class="headerlink" title="3. html文件基本结构"></a>3. html文件基本结构</h3><p>html是大小写不敏感的语言</p><table><thead><tr><th align="left">写法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">&lt;!DOCTYPE html&gt;</td><td align="left">说明html版本<br />这里是html代表html5</td></tr><tr><td align="left">&lt;html&gt;</td><td align="left">一个html标签代表整个网页整体<br />其中有一个head标签和一个body标签</td></tr><tr><td align="left">&lt;head&gt;</td><td align="left">后面讲</td></tr><tr><td align="left">&lt;body&gt;</td><td align="left">后面讲</td></tr></tbody></table><h3 id="4-html基本语法"><a href="#4-html基本语法" class="headerlink" title="4. html基本语法"></a>4. html基本语法</h3><h5 id="1-语法"><a href="#1-语法" class="headerlink" title="1) 语法"></a>1) 语法</h5><p>双标签(开始标签和结束标签)：&lt;标签名 属性1=值1 属性2=值2 …&gt;标签内容&lt;/标签名&gt;</p><p>单标签(只有开始标签)(两种写法)：&lt;标签名 属性1=值1 属性2=值2 …&gt; 或者 &lt;标签名 属性1=值1 属性2=值2 …/&gt;</p><h5 id="2-说明"><a href="#2-说明" class="headerlink" title="2) 说明"></a>2) 说明</h5><table><thead><tr><th align="left">写法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">&lt;&gt; 和 /</td><td align="left">都是固定写法</td></tr><tr><td align="left">标签名</td><td align="left">只能写html相应版本提供的标签的标签名<br />什么标签是什么标签类型是确定的，不能自己改变<br />注意：标签名前面不能随便加空格，后边无所谓</td></tr><tr><td align="left">属性</td><td align="left">属性是以’属性名=值’的形式出现<br />多个属性之间用空格隔开<br />属性的顺序不影响结果<br />不管是什么属性的值，值必须用引号引起来</td></tr><tr><td align="left">标签内容</td><td align="left">任何内容都可以作为标签内容；<br />例如：文字、标签</td></tr></tbody></table><h1 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h1><h3 id="1-head的作用"><a href="#1-head的作用" class="headerlink" title="1. head的作用"></a>1. head的作用</h3><p>head标签主要负责网页图标和标题的显示以及网页的基本设置</p><h3 id="2-head标签中的标签"><a href="#2-head标签中的标签" class="headerlink" title="2. head标签中的标签"></a>2. head标签中的标签</h3><p>head中可以写的标签：meta    title    link    style    script    base</p><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>meta</td><td>设置网页元数据<br />例如：网页的编码方式、网页的搜索关键字、网页介绍等</td></tr><tr><td>title</td><td>设置网页标题</td></tr><tr><td>link</td><td>导入文件(设置网页图标、导入外部样式表)</td></tr><tr><td>其他</td><td>现在不涉及，后面讲</td></tr></tbody></table><p>部分标签的写法：</p><table><thead><tr><th align="left">标签</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">&lt;meta charset=’UTF-8’&gt;</td><td align="left">设置文本编码方式</td></tr><tr><td align="left">&lt;title&gt;标题&lt;/title&gt;</td><td align="left">设置网页标题</td></tr><tr><td align="left">&lt;link rel=”stylesheet” type=”text/css” href=””/&gt;</td><td align="left">link标签：导入文件<br />rel属性：设置被导入的文件的作用<br />        stylesheet  -  样式表<br />        icon  -  网页图标<br />type属性：设置文件类型：文件类型/文件后缀<br />        text/css  -  导入的文件是：后缀是.css的文本文件<br />        image/png  -  导入的文件是图片，图片后缀是.png<br />href属性：被导入的文件路径</td></tr></tbody></table><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/ico<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/aaa.ico<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p>效果：</p><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-12-02_11-50-02.png" alt=""></p><h1 id="body标签"><a href="#body标签" class="headerlink" title="body标签"></a>body标签</h1><h3 id="1-标题标签：h1-h6"><a href="#1-标题标签：h1-h6" class="headerlink" title="1. 标题标签：h1~h6"></a>1. 标题标签：h1~h6</h3><p>如果文字的意义是标题的时候才选择标题标签</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>标题2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>标题3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>标题4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>标题5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>标题6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>    你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>效果：</p><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-12-02_11-50-11.png" alt=""></p><h3 id="2-段落标签：p"><a href="#2-段落标签：p" class="headerlink" title="2. 段落标签：p"></a>2. 段落标签：p</h3><p>一个段落就是一个p标签(多个p标签的内容之间会自动换行，并保持段落缩进)</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            123456789112315656548979815165            48489455465464489797            76545648797/764564849879765            48679879765464987            9797<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            5454        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            jskldjf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>slkdjfl        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>效果：</p><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-12-02_12-03-05.png" alt=""></p><p>&lt;br/&gt;是换行符</p><h3 id="3-普通文本标签：font"><a href="#3-普通文本标签：font" class="headerlink" title="3. 普通文本标签：font"></a>3. 普通文本标签：font</h3><p>多个font标签的文字可以在一行显示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span><span class="token punctuation">></span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>效果：</p><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-12-02_12-06-57.png" alt=""></p><h3 id="4-空格和换行"><a href="#4-空格和换行" class="headerlink" title="4. 空格和换行"></a>4. 空格和换行</h3><p>网页内容中，手动输入的空格和换行都没有用</p><h5 id="1-换行标签：br"><a href="#1-换行标签：br" class="headerlink" title="1) 换行标签：br"></a>1) 换行标签：br</h5><p>&lt;br /&gt;</p><p>在网页中的任何位置，需要换行时，直接加&lt;br&gt;或者&lt;br/&gt;</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        烽火连三月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        家书抵万金<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        白头搔更短<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        浑欲不胜簪    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>效果：</p><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-12-02_12-15-40.png" alt=""></p><h5 id="2-空格"><a href="#2-空格" class="headerlink" title="2) 空格"></a>2) 空格</h5><p>&amp;nbsp;    -    一个空格(单位是像素)</p><p>&amp;emsp;    -    一个空格(单位是空格键)</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>烽火连三月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token entity" title="&emsp;">&amp;emsp;</span>家书抵万金<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        白头搔更短<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        浑欲不胜簪    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>效果：</p><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-12-02_12-19-16.png" alt=""></p><h3 id="5-文字效果：倾斜、加粗"><a href="#5-文字效果：倾斜、加粗" class="headerlink" title="5. 文字效果：倾斜、加粗"></a>5. 文字效果：倾斜、加粗</h3><h5 id="1-加粗：-lt-b-gt-lt-b-gt-、-lt-strong-gt-lt-strong-gt"><a href="#1-加粗：-lt-b-gt-lt-b-gt-、-lt-strong-gt-lt-strong-gt" class="headerlink" title="1) 加粗：&lt;b&gt;&lt;/b&gt;、&lt;strong&gt;&lt;/strong&gt;"></a>1) 加粗：&lt;b&gt;&lt;/b&gt;、&lt;strong&gt;&lt;/strong&gt;</h5><p>strong有强调的意思</p><h5 id="2-倾斜：-lt-i-gt-lt-i-gt-、-lt-em-gt-lt-em-gt"><a href="#2-倾斜：-lt-i-gt-lt-i-gt-、-lt-em-gt-lt-em-gt" class="headerlink" title="2) 倾斜：&lt;i&gt;&lt;/i&gt;、&lt;em&gt;&lt;/em&gt;"></a>2) 倾斜：&lt;i&gt;&lt;/i&gt;、&lt;em&gt;&lt;/em&gt;</h5><p>em有强调的作用</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        烽火连三月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>家书抵万金<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>白头搔更短<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>浑欲不胜簪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>效果：</p><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-12-02_12-27-36.png" alt=""></p><h3 id="6-水平线：-lt-hr-gt"><a href="#6-水平线：-lt-hr-gt" class="headerlink" title="6. 水平线：&lt;hr /&gt;"></a>6. 水平线：&lt;hr /&gt;</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-12-02_14-27-44.png" alt=""></p><h3 id="7-列表：-lt-li-gt-lt-li-gt"><a href="#7-列表：-lt-li-gt-lt-li-gt" class="headerlink" title="7. 列表：&lt;li&gt;&lt;/li&gt;"></a>7. 列表：&lt;li&gt;&lt;/li&gt;</h3><h5 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1) 无序列表"></a>1) 无序列表</h5><h5 id="2-有序列表：ol-li"><a href="#2-有序列表：ol-li" class="headerlink" title="2) 有序列表：ol-li"></a>2) 有序列表：ol-li</h5><p>ol标签    -    表示整个列表容器</p><p>li标签    -    表示列表中的元素</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4444<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>效果：</p><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-12-02_14-43-12.png" alt=""></p><h5 id="3-分组列表"><a href="#3-分组列表" class="headerlink" title="3) 分组列表"></a>3) 分组列表</h5><h3 id="8-图片和超链接"><a href="#8-图片和超链接" class="headerlink" title="8. 图片和超链接"></a>8. 图片和超链接</h3><h5 id="1-图片标签：img"><a href="#1-图片标签：img" class="headerlink" title="1) 图片标签：img"></a>1) 图片标签：img</h5><p>&lt;img src=””/&gt;</p><p>src属性：图片地址</p><p>title属性：图片标题(鼠标悬停显示)</p><p>alt属性：图片加载失败的提示信息</p><h5 id="2-超链接标签：a"><a href="#2-超链接标签：a" class="headerlink" title="2) 超链接标签：a"></a>2) 超链接标签：a</h5><p>&lt;a href=”跳转目的地”&gt;可见部分&lt;/a&gt;</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>效果：</p><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-12-02_15-00-09.png" alt=""></p><p>当然，也可以将图片导入作为超链接的可见部分</p><p>href属性：跳转目的地</p><p>​    a. 网页地址    -    跳转到指定网页<br>​    b. 本地html文件地址    -    打开指定html文件对应的网页<br>​    c. 选择器    -    将当前页面滚动到选择器所在的位置<br>​                用id属性添加id选择器，href中选择器名前加#<br>​    d. #    -    刷新页面(刷新后自动回到顶部)</p><p>target属性：页面打开方式</p><p>​    a. _self    -    默认值，在当前页面中渲染新的页面<br>​    b. _blank    -    不动原页面，在新的窗口中渲染新的页面</p><h3 id="9-表格标签：table、tr、td"><a href="#9-表格标签：table、tr、td" class="headerlink" title="9. 表格标签：table、tr、td"></a>9. 表格标签：table、tr、td</h3><p>table标签    -    代表整个表格</p><p>tr标签    -    一个tr代表一行</p><p>td标签    -    一个td代表一个单元格</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>效果：</p><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-12-02_15-54-41.png" alt=""></p><p>table标签的border属性：设置线框的宽度</p><p>table标签的cellspacing属性：设置单元格之间和单元格和表格之间的间隙，默认为1</p><p>table标签的bordercolor属性：设置线框的颜色(单词或者十六进制RGB)</p><p>table标签的bgcolor属性：设置表格背景颜色</p><p>tr、td标签的bgcolor属性：设置单元格背景颜色</p><p>table、td标签的width属性：设置单元格的宽度</p><p>table、tr、td标签的height属性：设置单元格的高度</p><p>table的align属性：设置整个表格在网页中的对齐方式(center, left(默认), right)</p><p>tr、td的align属性：设置单元格内容在单元格中的对齐方式</p><p>table、tr、td标签的cellpadding属性：设置单元格中的内容到边框的距离</p><p>td的colspan属性：设置单元格的列合并，值为数字，合并几列</p><p>td的rowspan属性：设置单元格的行合并，值为数字，合并几行</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>700<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aqua<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-12-02_17-33-02.png" alt=""></p><h3 id="10-input标签"><a href="#10-input标签" class="headerlink" title="10. input标签"></a>10. input标签</h3><h5 id="1-表单标签：form"><a href="#1-表单标签：form" class="headerlink" title="1) 表单标签：form"></a>1) 表单标签：form</h5><p>表单标签是专门用来做用户信息收集的标签，是一个容器型的标签，单独用没有意义，一般需要配合表单相关的标签来使用</p><p>主要完成数据的提交和重置的功能</p><p>表单相关标签：input、textarea、select</p><p>action属性    -    数据提交的路径(填接口)</p><p>method属性    -    http请求方式(接口类型)</p><h5 id="2-input标签"><a href="#2-input标签" class="headerlink" title="2) input标签"></a>2) input标签</h5><p>type属性    -    决定标签的作用</p><p>​        text(默认值)    -    普通的文本输入框<br>​                name不会显示，用来区分和提交数据的<br>​                value是输入框的内容<br>​                placeholder是占位符(输入提示信息)<br>​                maxlength限制输入框内容的长度</p><p>​        password    -    密码输入框</p><p>​        radio    -    单选按钮<br>​                name设置成一样的，value提供选择值，文本另写<br>​                让lable标签的for属性和表单标签的id属性保持一致，可以让lable和表单标签关联<br>​                checked属性设置为checked，对应的按钮会被默认选中</p><p>​        checkbox    -    复选按钮<br>​                属性和radio里的大同小异</p><p>​        button    -    普通按钮<br>​                value是按钮上可见的文字<br>​                disabled是禁用<br>​                另外还有一个button标签，功能相似</p><p>​        submit    -    提交按钮<br>​                将当前form标签中的所有设置name属性值的相关标签，以name=value的形式对数据进行提交</p><p>​        reset    -    重置按钮<br>​                将当前form标签中的所有相关标签的状态恢复到初始状态</p><h3 id="11-多行文本域和下拉菜单"><a href="#11-多行文本域和下拉菜单" class="headerlink" title="11. 多行文本域和下拉菜单"></a>11. 多行文本域和下拉菜单</h3><h5 id="1-textarea标签"><a href="#1-textarea标签" class="headerlink" title="1) textarea标签"></a>1) textarea标签</h5><p>支持多行输入的输入框<br>rows属性    -    控制行数(输入框的显示行数)<br>rols属性    -    控制列数(输入框的显示列数)</p><h5 id="2-下拉菜单：select-option"><a href="#2-下拉菜单：select-option" class="headerlink" title="2) 下拉菜单：select-option"></a>2) 下拉菜单：select-option</h5><p>select标签    -    整个下拉列表<br>option标签    -    下拉列表中的选项<br>        selected属性    -    默认值<br>optgroup标签    -    设置该标签的label属性来对同一个下拉列表中的选项分组</p><h3 id="12-div和span"><a href="#12-div和span" class="headerlink" title="12. div和span"></a>12. div和span</h3><p>div和span都是无语义标签，主要是用来对网页中的内容进行分块和分组的</p><p>div默认是块级标签，显示的时候只能一个占一行</p><p>span默认是行内标签，显示的时候一行可以显示多个</p>]]></content>
      
      
      <categories>
          
          <category> web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分支与循环</title>
      <link href="/2019/11/14/day4-fen-zhi-yu-xun-huan/"/>
      <url>/2019/11/14/day4-fen-zhi-yu-xun-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="分支结构2："><a href="#分支结构2：" class="headerlink" title="分支结构2："></a>分支结构2：</h1><p><strong>if - elif - else结构</strong></p><p>部分内容转自 <a href="https://www.yiibai.com/python/python_if_else.html" target="_blank" rel="noopener">https://www.yiibai.com/python/python_if_else.html</a> </p><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-11-07_11-01-32.png" alt="上课老师笔记"></p><p><code>elif</code>语句允许检查多个表达式是否为<code>True</code>，并在其中一个条件求值为<code>True</code>时立即执行对应代码块。</p><p>与<code>else</code>语句类似，<code>elif</code>语句是可选的。 但是，与<code>else</code>语句不同的是，<code>else</code>语句最多可以有一个语句，在<code>if</code>之后可以有任意数量的<code>elif</code>语句。</p><p><strong>语法</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> expression1<span class="token punctuation">:</span>    statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">elif</span> expression2<span class="token punctuation">:</span>    statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">elif</span> expression3<span class="token punctuation">:</span>    statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Python</code></pre><p>Python不像其他编程语言那样提供<code>switch</code>或<code>case</code>语句，但是可以使用<code>if..elif...else</code>语句来模拟<code>switch case</code>，如下所示：</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span>amount <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"Enter amount: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> amount<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">:</span>   discount <span class="token operator">=</span> amount<span class="token operator">*</span><span class="token number">0.05</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Discount"</span><span class="token punctuation">,</span>discount<span class="token punctuation">)</span><span class="token keyword">elif</span> amount<span class="token operator">&lt;</span><span class="token number">5000</span><span class="token punctuation">:</span>   discount <span class="token operator">=</span> amount<span class="token operator">*</span><span class="token number">0.10</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Discount"</span><span class="token punctuation">,</span>discount<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   discount <span class="token operator">=</span> amount<span class="token operator">*</span><span class="token number">0.15</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Discount"</span><span class="token punctuation">,</span>discount<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Net payable:"</span><span class="token punctuation">,</span>amount<span class="token operator">-</span>discount<span class="token punctuation">)</span>Python</code></pre><p>当执行上述代码时，会产生以下结果 -</p><pre class=" language-shell"><code class="language-shell">Enter amount: 600Discount 30.0Net payable: 570.0Enter amount: 3000Discount 300.0Net payable: 2700.0Enter amount: 6000Discount 900.0Net payable: 5100.0Shell</code></pre><h1 id="循环结构：for循环和while循环"><a href="#循环结构：for循环和while循环" class="headerlink" title="循环结构：for循环和while循环"></a>循环结构：for循环和while循环</h1><h3 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1. for循环"></a>1. for循环</h3><h5 id="1）语法"><a href="#1）语法" class="headerlink" title="1）语法"></a>1）语法</h5><pre class=" language-markdown"><code class="language-markdown">for 变量 in 序列：<span class="token code keyword">    循环体</span></code></pre><h5 id="2）说明"><a href="#2）说明" class="headerlink" title="2）说明"></a>2）说明</h5><table><thead><tr><th>项目</th><th>解释</th></tr></thead><tbody><tr><td>for</td><td>关键字，固定写法</td></tr><tr><td>变量名</td><td>和声名变量时的要求一样</td></tr><tr><td>in</td><td>关键字，固定写法</td></tr><tr><td>序列</td><td>容器型数据；字符串、列表、字典、元组、集合、迭代器、生成器、range</td></tr><tr><td>：</td><td>固定写法</td></tr><tr><td>循环体</td><td>和for保持一个缩进的一条或者多条语句；需要重复执行的语句</td></tr></tbody></table><h5 id="3）执行过程"><a href="#3）执行过程" class="headerlink" title="3）执行过程"></a>3）执行过程</h5><p>让变量依次在序列中取值，取完为止；每取一个值，执行一次循环体</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">'abc123'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x=:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'+++++'</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-markdown"><code class="language-markdown">x=: a+++++x=: b+++++x=: c+++++x=: 1+++++x=: 2+++++x=: 3+++++</code></pre><h3 id="2-range"><a href="#2-range" class="headerlink" title="2. range()"></a>2. range()</h3><p>range(N) - 产生0 ~ N - 1的数字序列，递进1</p><p>range(M, N) - 产生M ~ N - 1的数字序列，递进1</p><p>range(M, N, step) - 产生M ~ N - 1的数字序列，递进step</p><p><img src="D:%5C%E5%BA%93%5C%E6%96%87%E6%A1%A3%5C%E6%88%AA%E5%9B%BE%5CCSDN%5CSnipaste_2019-11-07_12-08-57.png" alt="老师上课笔记"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'=======分割线========'</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'=======分割线========'</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-markdown"><code class="language-markdown">012<span class="token title important">3<span class="token punctuation">=======</span></span>分割线========678<span class="token title important">9<span class="token punctuation">=======</span></span>分割线========024</code></pre><p>当用range控制循环次数时，如果循环变量没用，只是为了控制循环次数，推荐直接用下划线命名，能直接了当的告诉阅读代码的人</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>课堂练习1：</p><p>打印0~100中所有能被3整除的数</p><p>两种方法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>课堂练习2：</p><p>统计1~100中，能被4整除并且个位数是2的数字的个数</p><pre class=" language-python"><code class="language-python">j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        j <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span></code></pre><p>课堂练习3：</p><p>计算1+2+3+4+…+100</p><pre class=" language-python"><code class="language-python">sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum1 <span class="token operator">+=</span> i<span class="token keyword">print</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span></code></pre><h3 id="3-while循环"><a href="#3-while循环" class="headerlink" title="3. while循环"></a>3. while循环</h3><h5 id="1）语法-1"><a href="#1）语法-1" class="headerlink" title="1）语法"></a>1）语法</h5><pre class=" language-markdown"><code class="language-markdown">while 条件语句：<span class="token code keyword">        循环体</span></code></pre><h5 id="2）说明-1"><a href="#2）说明-1" class="headerlink" title="2）说明"></a>2）说明</h5><table><thead><tr><th align="left">代码</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">while</td><td align="left">关键字，固定写法</td></tr><tr><td align="left">条件语句</td><td align="left">任何有结果的表达式</td></tr><tr><td align="left">：</td><td align="left">固定写法</td></tr><tr><td align="left">循环体</td><td align="left">和while保持一个缩进的一条或者多条语句；需要重复执行的语句</td></tr></tbody></table><h5 id="3）执行过程-1"><a href="#3）执行过程-1" class="headerlink" title="3）执行过程"></a>3）执行过程</h5><p>先判断条件语句是否为True，若是，执行循环体，执行完后继续此过程，直到条件语句为False为止</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> num <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'...'</span><span class="token punctuation">)</span>    num <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>结果：</p><pre class=" language-markdown"><code class="language-markdown">...............</code></pre><h3 id="4-for循环和while循环的选择"><a href="#4-for循环和while循环的选择" class="headerlink" title="4. for循环和while循环的选择"></a>4. for循环和while循环的选择</h3><h5 id="1）什么时候用for循环"><a href="#1）什么时候用for循环" class="headerlink" title="1）什么时候用for循环"></a>1）什么时候用for循环</h5><p>循环次数确定的时候</p><p>遍历序列</p><h5 id="2）什么时候用while循环"><a href="#2）什么时候用while循环" class="headerlink" title="2）什么时候用while循环"></a>2）什么时候用while循环</h5><p>死循环（无限循环）</p><p>循环次数不确定</p><p>例子：</p><pre class=" language-python"><code class="language-python">value <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> value <span class="token operator">!=</span> <span class="token string">'0'</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'输入数字'</span><span class="token punctuation">)</span></code></pre><h3 id="5-循环关键字"><a href="#5-循环关键字" class="headerlink" title="5. 循环关键字"></a>5. 循环关键字</h3><h5 id="1）continue"><a href="#1）continue" class="headerlink" title="1）continue"></a>1）continue</h5><p>continue是循环体中的关键字</p><p>如果执行到continue，当次循环结束，进入下一个循环</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==='</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> x <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'+++'</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-markdown"><code class="language-markdown">======+++======+++</code></pre><h5 id="2）break"><a href="#2）break" class="headerlink" title="2）break"></a>2）break</h5><p>break是循环体中的关键字</p><p>循环中执行到break时，结束整个循环，即跳出循环</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==='</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> x <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'+++'</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-markdown"><code class="language-markdown">===</code></pre><p>课堂练习4：</p><p>游戏开始的时候随机产生一个数字，不断输入数字，直到输入的数字和产生的数字一致，游戏结束。在没有猜对的时候，给出“大了”“小了”的提示。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> randinttarget <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 产生0到100的随机数</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'猜：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> num <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'小了'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> num <span class="token operator">></span> target<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'大了'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你猜对了'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span></code></pre><h5 id="3）else"><a href="#3）else" class="headerlink" title="3）else"></a>3）else</h5><p>循环自然死亡时，else的代码段会执行</p><p>循环强制死亡时，则不会</p><p>自然死亡：for循环把值取完；while条件为False</p><p>强制死亡：break</p><p>完整的for循环</p><pre class=" language-markdown"><code class="language-markdown">for 变量 in 序列：<span class="token code keyword">    循环体</span>else：<span class="token code keyword">    代码段</span></code></pre><p>完整的while循环</p><pre class=" language-markdown"><code class="language-markdown">while 条件语句：<span class="token code keyword">    循环体</span>else:<span class="token code keyword">    代码段</span></code></pre><p>自然死亡例子：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'else'</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-markdown"><code class="language-markdown">0123else</code></pre><p>强制死亡例子：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'else'</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-markdown"><code class="language-markdown">0</code></pre><p>else存在的意义：</p><p>可以通过看else里的代码有没有执行，来判断循环是否遇到了break</p><p>随堂练习5：</p><p>计算1！+2！+3！…+10!</p><p>方法1：</p><pre class=" language-python"><code class="language-python">sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">*=</span> j    sum1 <span class="token operator">+=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span></code></pre><p>方法2：</p><pre class=" language-python"><code class="language-python">sum1 <span class="token operator">=</span> <span class="token number">0</span>sum2 <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum2 <span class="token operator">*=</span> i    sum1 <span class="token operator">+=</span> sum2<span class="token keyword">print</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span></code></pre><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""1. 求斐波那契数列列中第n个数的值：1， 1， 2， 3， 5， 8， 13， 21， 34...."""</span><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_1 <span class="token operator">=</span> <span class="token number">1</span>    num_2 <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 也可以写num_1, num_2 = num_2, num_1 + num_2</span>        temp <span class="token operator">=</span> num_1 <span class="token operator">+</span> num_2        num_1 <span class="token operator">=</span> num_2        num_2 <span class="token operator">=</span> temp    <span class="token keyword">print</span><span class="token punctuation">(</span>num_2<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入斐波那契数列的位数(输入q退出)： '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断输入的数据是否可以转为整型，若不是，打印警告</span>            n <span class="token operator">=</span> int<span class="token punctuation">(</span>n<span class="token punctuation">)</span>            <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> ValueError        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n铁憨憨，让你输斐波那契数列的位数，你非要皮一下，重来！\n'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            fibonacci<span class="token punctuation">(</span>n<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""2. 判断101-200之间有多少个素数，并输出所有素数。判断素数的方法：一个数分别除2到sqrt(这个数)，如果能被整除，则表明此数不不是素数，反之是素数(prime number)"""</span><span class="token keyword">def</span> <span class="token function">check_prime_num</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""检查数n是否素数"""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>n <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>prime_num_num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> check_prime_num<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        prime_num_num <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>prime_num_num<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""3. 打印出所有的⽔水仙花数,所谓⽔水仙花数是指一个三位数，其各位数字立方和等于该数本身。例例如： 153是一个水仙花数,因为153 = 1^3 + 5^3 + 3^3"""</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 也可以用字符串取数字</span>    a <span class="token operator">=</span> num <span class="token operator">//</span> <span class="token number">100</span>    c <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span>    b <span class="token operator">=</span> num <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span>    <span class="token keyword">if</span> a <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> b <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> c <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">==</span> num<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""4. 有一分数序列： 2/1,3/2,5/3,8/5,13/8,21/13...求出这个数列的第20个分数分子：上一个分数的分子加分母分母: 上一个分数的分子 fz = 2 fm = 1 fz+fm / fz"""</span><span class="token keyword">def</span> <span class="token function">get_target_num</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    top <span class="token operator">=</span> <span class="token number">2</span>    low <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> top <span class="token operator">+</span> low        low <span class="token operator">=</span> top        top <span class="token operator">=</span> temp    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'%d/%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>top<span class="token punctuation">,</span> low<span class="token punctuation">)</span><span class="token punctuation">)</span>get_target_num<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""5. 给一个正整数，要求：1. 求它是几位数2. 逆序打印出各位数字"""</span><span class="token keyword">def</span> <span class="token function">solution1</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""方法1"""</span>    num_str <span class="token operator">=</span> str<span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 核心思想：转化为字符串</span>    num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 将每一位数字按序存储在列表中</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>num_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印数字位数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 反转列表，并打印</span>    num_list<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> num_list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">solution2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""方法2"""</span>    num_str <span class="token operator">=</span> str<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>num_str<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>num_str<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'\n请输入一个正整数(输入q退出)： '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断输入的数据是否是正整数，若不是，打印警告</span>            n <span class="token operator">=</span> int<span class="token punctuation">(</span>n<span class="token punctuation">)</span>            <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> ValueError        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n铁憨憨，让你正整数，你非要皮一下，重来！'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            solution2<span class="token punctuation">(</span>n<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""6. 小明单位发了100元的购物卡，小明到超市买三类洗化用品，洗发水（15元），香皂（2元），牙刷（5元）。要把100元整好花掉，可如有哪些购买结合？"""</span>money <span class="token operator">=</span> <span class="token number">100</span>a_price <span class="token operator">=</span> <span class="token number">15</span>b_price <span class="token operator">=</span> <span class="token number">5</span>c_price <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 遍历商品a的个数</span><span class="token keyword">for</span> a_num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>money <span class="token operator">/</span> a_price<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    left_money1 <span class="token operator">=</span> money    left_money1 <span class="token operator">-=</span> a_num <span class="token operator">*</span> a_price    <span class="token comment" spellcheck="true"># 遍历商品b的个数</span>    <span class="token keyword">for</span> b_num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>left_money1 <span class="token operator">/</span> b_price<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        left_money2 <span class="token operator">=</span> left_money1        left_money2 <span class="token operator">-=</span> b_num <span class="token operator">*</span> b_price        <span class="token comment" spellcheck="true"># 遍历商品c的个数</span>        <span class="token keyword">for</span> c_num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>left_money2 <span class="token operator">/</span> c_price<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            left_money3 <span class="token operator">=</span> left_money2            left_money3 <span class="token operator">-=</span> c_num <span class="token operator">*</span> c_price            <span class="token keyword">if</span> left_money3 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>a_num<span class="token punctuation">,</span> b_num<span class="token punctuation">,</span> c_num<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""7.我国古代数学家张邱建在《算经》中出了一道“百钱买百鸡”的问题，题意是这样的：5文钱可以买一只公鸡，3文钱可以买一只母鸡，1文钱可以买3只雏鸡。现在用100文钱买100只鸡，那么各有公鸡、母鸡、雏鸡多少只？请编写程序实现。"""</span><span class="token comment" spellcheck="true"># 这道题由于可以直接利用上一题的大部分代码，我就懒得重新优化算法了</span>money <span class="token operator">=</span> <span class="token number">100</span>all_num <span class="token operator">=</span> <span class="token number">100</span>a_price <span class="token operator">=</span> <span class="token number">5</span>b_price <span class="token operator">=</span> <span class="token number">3</span>c_price <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 遍历商品a的个数</span><span class="token keyword">for</span> a_num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>money <span class="token operator">/</span> a_price<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    left_money1 <span class="token operator">=</span> money    left_money1 <span class="token operator">-=</span> a_num <span class="token operator">*</span> a_price    <span class="token comment" spellcheck="true"># 遍历商品b的个数</span>    <span class="token keyword">for</span> b_num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>left_money1 <span class="token operator">/</span> b_price<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        left_money2 <span class="token operator">=</span> left_money1        left_money2 <span class="token operator">-=</span> b_num <span class="token operator">*</span> b_price        <span class="token comment" spellcheck="true"># 遍历商品c的个数</span>        <span class="token keyword">for</span> c_num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>left_money2 <span class="token operator">/</span> c_price<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            left_money3 <span class="token operator">=</span> left_money2            left_money3 <span class="token operator">-=</span> c_num <span class="token operator">*</span> c_price            <span class="token keyword">if</span> left_money3 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> a_num <span class="token operator">+</span> b_num <span class="token operator">+</span> c_num <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">==</span> all_num<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>a_num<span class="token punctuation">,</span> b_num<span class="token punctuation">,</span> c_num<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""8. 这是经典的"百马百担"问题:有一百匹马，驮一百担货，大马驮3担，中马驮2担，两只小马驮1担，问有大，中，小马各几匹？"""</span><span class="token comment" spellcheck="true"># 算法和7一模一样，把担转化为钱就可以了，略了</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""9. 控制台输出三角形a.根据n的值的不同，输出相应的形状n = 5时             n = 4*****               ********                ******                 ****                  **b.根据n的值的不同，输出相应的形状(n为奇数)n = 5               n = 7  *                    * ***                  ********                *****                    *******"""</span><span class="token keyword">def</span> <span class="token function">reverse_triangle</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""倒三角输出"""</span>    <span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        n <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""居中正三角输出"""</span>    num_n <span class="token operator">=</span> n    <span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        space_num <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        space_str <span class="token operator">=</span> <span class="token string">' '</span> <span class="token operator">*</span> space_num        <span class="token keyword">print</span><span class="token punctuation">(</span>space_str<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        star_num <span class="token operator">=</span> num_n <span class="token operator">-</span> space_num <span class="token operator">*</span> <span class="token number">2</span>        star_str <span class="token operator">=</span> <span class="token string">'*'</span> <span class="token operator">*</span> star_num        <span class="token keyword">print</span><span class="token punctuation">(</span>star_str<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>space_str<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        n <span class="token operator">-=</span> <span class="token number">2</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">play_reverse_triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入正整数(输入q退出)： '</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断输入的数据是否是正整数，若不是，打印警告</span>                n <span class="token operator">=</span> int<span class="token punctuation">(</span>n<span class="token punctuation">)</span>                <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">raise</span> ValueError            <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n铁憨憨，让你输正整数，你非要皮一下，重来！'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                reverse_triangle<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">play_triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入正奇数(输入q退出)： '</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断输入的数据是否是正奇数，若不是，打印警告</span>                n <span class="token operator">=</span> int<span class="token punctuation">(</span>n<span class="token punctuation">)</span>                <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">or</span> n <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">raise</span> ValueError            <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n铁憨憨，让你输正奇数，你非要皮一下，重来！'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                triangle<span class="token punctuation">(</span>n<span class="token punctuation">)</span></code></pre><h1 id="作业答案from老师"><a href="#作业答案from老师" class="headerlink" title="作业答案from老师"></a>作业答案from老师</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==================第1题================='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1.控制台输入年龄，根据年龄输出不同的提示(例如:老年人，青壮年，成年人，未成年，儿童)</span>age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入年龄:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># input输入的数据是字符串，需要先转换成int类型</span><span class="token comment" spellcheck="true"># 后面的条件都是在前面的条件不成立的时候进行判断的</span><span class="token keyword">if</span> age <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'儿童'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'未成年'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">&lt;=</span> <span class="token number">28</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'成年人'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'壮年'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'老年人'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==================第2题================='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.计算5的阶乘 5!的结果是</span><span class="token comment" spellcheck="true"># 解题思路: 5! = 5*4*3*2*1, 先将1，2，3，4，5依次取出，再累计求乘积</span>sum1 <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 保存最后的乘积，默认值为1</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum1 <span class="token operator">*=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'5!为:'</span><span class="token punctuation">,</span> sum1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==================第3题================='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.求1+2!+3!+...+20!的和 1.程序分析：此程序只是把累加变成了累乘。</span>sum1 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 保存最后的和</span>sum2 <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 保存1~20中，每个数的阶乘</span><span class="token comment" spellcheck="true"># 依次取出1~20</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum2 <span class="token operator">*=</span> num    sum1 <span class="token operator">+=</span> sum2<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1+2!+3!+...+20!为:'</span><span class="token punctuation">,</span> sum1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==================第4题================='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.计算 1+1/2!+1/3!+1/4!+...1/20!=?</span>sum1 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 保存最后的和</span>sum2 <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 保存1~20中，每个数的阶乘</span><span class="token comment" spellcheck="true"># 依次取出1~20</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum2 <span class="token operator">*=</span> num    sum1 <span class="token operator">+=</span> <span class="token number">1</span><span class="token operator">/</span>sum2<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1+2!+3!+...+20!为:'</span><span class="token punctuation">,</span> sum1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==================第5题================='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5.循环输入大于0的数字进行累加，直到输入的数字为0，就结束循环，并最后输出累加的结果。</span>sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入数字:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sum1 <span class="token operator">+=</span> num    <span class="token comment" spellcheck="true"># 如果输入为0，退出循环</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入的数字的和:'</span><span class="token punctuation">,</span> sum1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==================第6题================='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6.求s=a+aa+aaa+aaaa+aa...a的值，其中a是一个数字。</span><span class="token comment" spellcheck="true"># 例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。</span>sum1 <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment" spellcheck="true"># 保存最后的和</span>a <span class="token operator">=</span> <span class="token number">2</span>num <span class="token operator">=</span> a    <span class="token comment" spellcheck="true"># 保存求和的每一项</span>n <span class="token operator">=</span> <span class="token number">5</span>      <span class="token comment" spellcheck="true"># 保存求和的项数</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    sum1 <span class="token operator">+=</span> num    num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> a    <span class="token comment" spellcheck="true"># 22 = 2*10+2; 222 = 22*10+2; 2222 = 222*10+2;...</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最终的和位:'</span><span class="token punctuation">,</span> sum1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==================第7题================='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 7.输入三个整数x,y,z，请把这三个数由小到大输出</span>x <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入x:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入y:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>z <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入z:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 先找到最小的一个数，存在x中</span><span class="token keyword">if</span> x <span class="token operator">></span> y<span class="token punctuation">:</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token keyword">if</span> x <span class="token operator">></span> z<span class="token punctuation">:</span>    x<span class="token punctuation">,</span> z <span class="token operator">=</span> z<span class="token punctuation">,</span> x<span class="token comment" spellcheck="true"># 再找出y和z中较小的存在y中，最大的存在z中</span><span class="token keyword">if</span> y <span class="token operator">></span> z<span class="token punctuation">:</span>    y<span class="token punctuation">,</span> z <span class="token operator">=</span> z<span class="token punctuation">,</span> y<span class="token comment" spellcheck="true"># 最后输出x,y,z的值即可</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==================第8题================='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 8.控制台输出三角形</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'========a========'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a.根据n的值的不同，输出相应的形状</span><span class="token comment" spellcheck="true"># 规律：从上往下每一行*的个数分别是5，4，3，2，1； 所以先将每一行的*的个数取到</span>n <span class="token operator">=</span> <span class="token number">5</span><span class="token comment" spellcheck="true"># num的取值分别是5，4，3，2，1</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 打印每一行*</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 一行打印结束后需要打印换行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'========b========'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># b.根据n的值的不同，输出相应的形状(n为奇数)</span><span class="token comment" spellcheck="true"># 规律：每一行*的个数分别是1，3，5；*前的空格数分别是2，1，0； *的个数 + 空格数的2倍 == n</span>n <span class="token operator">=</span> <span class="token number">5</span><span class="token comment" spellcheck="true"># num的值分别是1， 3， 5</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 先输出空格</span>    space_count <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> num<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>space_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 再输出*</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 一行内容输出完成后换行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==================第9题================='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 9.输出9*9口诀。 程序分析：分行与列考虑，共9行9列，i控制行，j控制列。</span><span class="token comment" spellcheck="true"># 第二个乘数行：每个表达式的第二个乘数是这个表达式所在的行数，第一行第二个乘数为1， 第2行第二个乘数都为2</span><span class="token comment" spellcheck="true">#        第3行第二个乘数为3，....</span><span class="token comment" spellcheck="true"># 第一个乘数：第一行是1； 第2行是：1，2；第3行是：1，2，3； ...</span><span class="token comment" spellcheck="true"># i取出所有的行，也就是每一行的第二个乘数</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># j控制每一行第一个乘数</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 按照a×b=c的格式输出每一个表达式</span>        <span class="token comment" spellcheck="true"># print(j, '×', i, '=', i*j, sep='', end=' ')</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d×%d=%-2d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 这个是格式字符串，后面会讲，不会可以先用上面那个方法</span>    <span class="token comment" spellcheck="true"># 一行结束后换行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==================第10题================='</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 10.这是经典的"百马百担"问题，有一百匹马，驮一百担货，大马驮3担，中马驮2担，两只小马驮1担，问有大，中，小马各几匹？</span><span class="token comment" spellcheck="true"># 注意: 目前可以使用穷举法</span><span class="token comment" spellcheck="true"># 大马最多：100 // 3 == 33       -> x</span><span class="token comment" spellcheck="true"># 中马最多: 100 // 2 == 50       -> y</span><span class="token comment" spellcheck="true"># 小马最多： 100 * 2 == 200      -> z</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> z <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> y<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> z<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">100</span> <span class="token operator">and</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'大马:%d, 中马:%d, 小马:%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量与运算符</title>
      <link href="/2019/11/14/day3-bian-liang-yu-yun-suan-fu/"/>
      <url>/2019/11/14/day3-bian-liang-yu-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h3 id="1-什么是变量"><a href="#1-什么是变量" class="headerlink" title="1. 什么是变量"></a>1. 什么是变量</h3><p>变量是用来申请空间存储数据的</p><h5 id="1）声明变量的语法"><a href="#1）声明变量的语法" class="headerlink" title="1）声明变量的语法"></a>1）声明变量的语法</h5><p>变量名 = 值（弱语言中，直接赋值就是声明）</p><p>在其他强语言中：数据类型名 变量名 = 值</p><pre class=" language-python"><code class="language-python">student_name <span class="token operator">=</span> <span class="token string">"小明"</span>age <span class="token operator">=</span> <span class="token number">28</span>sum_num <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">+</span> <span class="token number">42</span>years_after_eighteen <span class="token operator">=</span> age <span class="token operator">-</span> <span class="token number">18</span></code></pre><h5 id="2）说明"><a href="#2）说明" class="headerlink" title="2）说明"></a>2）说明</h5><p>变量名 - 程序猿自己命名的<br>              要求：是标识符，不能是关键字<br>              规范：见名知意；满足PEP8命名规范(所有字母都小写,下划线隔<br>                         开多个单词)；不能使用系统提供的函数名、类名、库名等<br>                         来给变量命名</p><p>=      -     赋值符号，并不是等号，等号是==；将右边的数据赋值给左边的<br>              变量</p><p>值     -    任何有结果的表达式；例如：数据、已经声明过的变量、运算表<br>              达式等</p><h3 id="2-变量的使用"><a href="#2-变量的使用" class="headerlink" title="2. 变量的使用"></a>2. 变量的使用</h3><p>使用变量就是使用变量中的值，变量中的值可以修改</p><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>age <span class="token operator">=</span> <span class="token string">'你好'</span><span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span></code></pre><h3 id="3-同时声明多个变量"><a href="#3-同时声明多个变量" class="headerlink" title="3. 同时声明多个变量"></a>3. 同时声明多个变量</h3><h5 id="1）同时声明多个变量，赋相同的值"><a href="#1）同时声明多个变量，赋相同的值" class="headerlink" title="1）同时声明多个变量，赋相同的值"></a>1）同时声明多个变量，赋相同的值</h5><p>变量名1 = 变量名2 = 变量名3 = 值</p><h5 id="2）同时声明多个变量，赋不同的值"><a href="#2）同时声明多个变量，赋不同的值" class="headerlink" title="2）同时声明多个变量，赋不同的值"></a>2）同时声明多个变量，赋不同的值</h5><p>变量名1， 变量名2， 变量名3 = 值1， 值2， 值3</p><h3 id="4-Python声明变量的原理"><a href="#4-Python声明变量的原理" class="headerlink" title="4. Python声明变量的原理"></a>4. Python声明变量的原理</h3><p>变量三要素（python表达）：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span></code></pre><p>值 - 给变量赋值的数据（10）</p><p>类型 - 给变量赋值的数据的类型（int）</p><p>地址 - 给变量赋值的数据在内存中的地址，也就是变量中真正存储的东西（0xff）</p><h5 id="1）强语言-Java-C等-："><a href="#1）强语言-Java-C等-：" class="headerlink" title="1）强语言(Java/C等)："></a>1）强语言(Java/C等)：</h5><p>类型名 变量名 = 值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span>a <span class="token operator">=</span> <span class="token number">100</span></code></pre><p>先用数据类型申请一定的内存空间，再往申请到的内存空间里存储数据。</p><p>重新赋值时，内存空间的地址不变。</p><p>变量给变量赋值时，重新申请内存空间。</p><p>比喻：</p><p>先在土地（内存）里挖个只能装特定物质的坑（申请到的内存空间），再将对应的该物质存储在坑里。</p><p>重新赋值时，将这个坑里的物质倒出，装入新的物质，坑还是原来的坑。</p><p>变量给变量赋值时，相当于把这个坑又重新挖了一个，物质重新填了一次。</p><h5 id="2）弱语言-python等"><a href="#2）弱语言-python等" class="headerlink" title="2）弱语言(python等)"></a>2）弱语言(python等)</h5><p>变量名 = 值</p><pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">100</span></code></pre><p>根据要存储的数据类型和大小，自动判断需要申请的空间的类型与大小，再申请内存空间。</p><p>重新赋值时，申请一个新的内存空间，将新的内存空间地址与变量名关联起来，并将旧的内存空间清空释放。地址会改变。</p><p>变量给变量赋值时，将原来变量的地址与新变量的变量名新增关联。</p><p>比喻：</p><p>先根据要存储的值规划挖的坑的大小与类型，再在土地（内存）里挖对应的适合与这个值的最节省土地（内存）的坑，再将值放进去。</p><p>重新赋值时，会根据要重新存储的值规划新的坑的大小和类型，再在土地（内存）上新挖一个适合与新值的坑，然后将新值放在新坑里，然后将坑的标志牌（变量名）移动到这个新的坑里，最后销毁旧坑。</p><p>变量给变量赋值时，相当于坑不变，给这个坑再立一个标志牌（标签）。</p><p>证明：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> type<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>python支持的运算符：</p><p>数学运算符、比较运算符、逻辑运算符、赋值运算符、位运算符</p><h3 id="1-数学运算符"><a href="#1-数学运算符" class="headerlink" title="1. 数学运算符"></a>1. 数学运算符</h3><p>+、-、*、/、%、//、**</p><h5 id="1）-、-、-、-同数学，略"><a href="#1）-、-、-、-同数学，略" class="headerlink" title="1）+、-、*、/  同数学，略"></a>1）+、-、*、/  同数学，略</h5><h5 id="2）-取余（取模）"><a href="#2）-取余（取模）" class="headerlink" title="2）%     取余（取模）"></a>2）%     取余（取模）</h5><p>5 % 2 = 1</p><p>常用与判断奇偶、是否整除、取低位数（如获取一个整数的个位数）</p><h5 id="3）-整除（商只取整数部分）（向下取整）"><a href="#3）-整除（商只取整数部分）（向下取整）" class="headerlink" title="3）//    整除（商只取整数部分）（向下取整）"></a>3）//    整除（商只取整数部分）（向下取整）</h5><p>负数整除除不尽的时候向下取整</p><p>5 // 2 = 2</p><p>-5 // 2 = -3</p><p>常用于取高位数（如获取一个整数的最高位）</p><h5 id="4）-幂运算"><a href="#4）-幂运算" class="headerlink" title="4）**  幂运算"></a>4）**  幂运算</h5><p>2 ** 10 = 1024</p><p>16 ** 0.5 = 4</p><h3 id="2-比较运算符（结果返回布尔值）"><a href="#2-比较运算符（结果返回布尔值）" class="headerlink" title="2. 比较运算符（结果返回布尔值）"></a>2. 比较运算符（结果返回布尔值）</h3><p>&lt;、&gt;、&lt;=、&gt;= 和数学一样</p><p>==  等于</p><p>!=  不等于</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span></code></pre><p>python支持连续比较：</p><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">28</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">&lt;</span> age <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span></code></pre><h3 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3. 逻辑运算符"></a>3. 逻辑运算符</h3><p>and、or、not</p><p>逻辑与、或、非</p><p>逻辑运算的运算对象和结果一般都是布尔值</p><h5 id="1）and"><a href="#1）and" class="headerlink" title="1）and"></a>1）and</h5><p>返回True的充要条件：均为True</p><pre class=" language-markdown"><code class="language-markdown">True and True  ->  TrueTrue and False  ->  FalseFalse and True  ->  FalseFalse and False  ->  False</code></pre><p>使用场景：需要多个条件同时满足</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> score <span class="token operator">>=</span> <span class="token number">90</span> <span class="token operator">and</span> sex <span class="token operator">=</span> famle<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'优秀女学生'</span><span class="token punctuation">)</span></code></pre><p>随堂练习：判断一个数是否能同时被3和7整除</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">35</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'能同时被3和7整除的命题结果: '</span><span class="token punctuation">,</span>       num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> num <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>结果是：</p><pre class=" language-markdown"><code class="language-markdown">能同时被3和7整除的命题结果: False</code></pre><h5 id="2）or"><a href="#2）or" class="headerlink" title="2）or"></a>2）or</h5><p>返回False的充要条件：均为False</p><pre class=" language-markdown"><code class="language-markdown">True or True -> TrueFalse or True -> TrueTrue or False -> TrueFalse or False -> False</code></pre><p>使用场景：多个条件中有一个满足即可</p><h5 id="3）not"><a href="#3）not" class="headerlink" title="3）not"></a>3）not</h5><p>改变布尔值（True变False，False变True）</p><pre class=" language-markdown"><code class="language-markdown">not True -> Falsenot False -> True</code></pre><h5 id="4）短路操作"><a href="#4）短路操作" class="headerlink" title="4）短路操作"></a>4）短路操作</h5><p>and的短路操作：<br>a and b，a是False的话，后面的不会执行，直接False</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fuc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数被执行了'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token boolean">False</span> <span class="token operator">and</span> fuc1<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>上代码不会打印’函数被执行了’，若把False改为True，则会打印</p><p>or的短路操作：<br>a or b，a是True的话，后面的不会执行，直接True</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fuc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数被执行了'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token boolean">True</span> <span class="token operator">or</span> fuc1<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>上代码不会打印’函数被执行了’，若把True改为False，则会打印</p><h3 id="4-赋值运算符"><a href="#4-赋值运算符" class="headerlink" title="4. 赋值运算符"></a>4. 赋值运算符</h3><p>=、+=、-=、<em>=、/=、%=、//=、*</em>=</p><p>要求：左边必须是变量；组合赋值运算符的左边必须是声明过的变量</p><p>组合赋值运算符是缩写，即</p><p>变量 += 值  -&gt;  变量 = 变量 + 值</p><pre class=" language-python"><code class="language-python">a <span class="token operator">+=</span> <span class="token number">1</span>a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span></code></pre><p>以上两种写法效果一样（前提是a已经声明过）</p><h3 id="5-运算符优先级"><a href="#5-运算符优先级" class="headerlink" title="5. 运算符优先级"></a>5. 运算符优先级</h3><p>数学运算符 &gt; 比较运算符 &gt; 逻辑运算符 &gt; 赋值运算符</p><p>数学运算符中同数学一样：幂运算 &gt; 乘除 &gt; 加减</p><h3 id="6-位运算符"><a href="#6-位运算符" class="headerlink" title="6. 位运算符"></a>6. 位运算符</h3><p>所有的位运算都是针对数字的补码进行操作的</p><p>所有位都参加，不管是不是符号位</p><p>速度最快，直接从底层运算，不需要消耗额外的内存</p><p>位运算：</p><p>&amp;（按位与），|（按位或），~（按位取反），^（按位异或）</p><p>&lt;&lt;（左移），&gt;&gt;（右移）</p><h5 id="1）-amp-（按位与）："><a href="#1）-amp-（按位与）：" class="headerlink" title="1）&amp;（按位与）："></a>1）&amp;（按位与）：</h5><p>补码的每一个对应位置，均为1结果的对应位置才是1</p><pre class=" language-markdown"><code class="language-markdown">1110 &amp; 0111 = 0110</code></pre><pre class=" language-markdown"><code class="language-markdown">3 &amp; 23的补码：000000112的补码：0000001000000011 &amp; 00000010 = 00000010 == 2-7 &amp; 3-7的补码：10000111(原) -> 11111001(补)3的补码：                 0000001111111001 &amp; 00000011 = 00000001 == 1</code></pre><p>应用：高效判断数字的奇偶性<br>数字 &amp; 1，结果是0则偶数，结果是1则奇数</p><h5 id="2）-（按位或）"><a href="#2）-（按位或）" class="headerlink" title="2）|（按位或）"></a>2）|（按位或）</h5><p>补码的每一个对应位置，均为0结果的对应位置才是0</p><pre class=" language-markdown"><code class="language-markdown">1110 &amp; 0111 = 1111</code></pre><pre class=" language-markdown"><code class="language-markdown">-7 | 3-7的补码: 11111001+3的补码：0000001111111001 | 00000011 = 1111101111111011 -> 11111010 -> 10000101 == -5</code></pre><h5 id="3）-（按位取反）"><a href="#3）-（按位取反）" class="headerlink" title="3）~（按位取反）"></a>3）~（按位取反）</h5><p>补码的每一个对应位置，0变1,1变0</p><pre class=" language-markdown"><code class="language-markdown">~ 1101  -> 0010</code></pre><pre class=" language-markdown"><code class="language-markdown">~ -7-7的补码: 11111001~ 11111001 -> 00000110 == 6</code></pre><h5 id="4）-（按位异或）"><a href="#4）-（按位异或）" class="headerlink" title="4）^（按位异或）"></a>4）^（按位异或）</h5><p>补码的每一个对应位置，相同为0，不同为1</p><pre class=" language-markdown"><code class="language-markdown">11011 ^ 10010 -> 01001</code></pre><h5 id="5）-lt-lt-（左移）"><a href="#5）-lt-lt-（左移）" class="headerlink" title="5）&lt;&lt;（左移）"></a>5）&lt;&lt;（左移）</h5><p>补码的每一个对应位置左移一位</p><p>效果：数字 * 2**n</p><p>数字乘以2的n次方</p><pre class=" language-markdown"><code class="language-markdown">2 &lt;&lt; 1  ->  2 * 2 <span class="token bold"><span class="token punctuation">**</span> 1 == 43 &lt;&lt; 2  ->  3 * 2 <span class="token punctuation">**</span></span> 2 == 12</code></pre><p>用法：乘以2的n次方(算法常用)</p><h5 id="6）-gt-gt-（右移）"><a href="#6）-gt-gt-（右移）" class="headerlink" title="6）&gt;&gt;（右移）"></a>6）&gt;&gt;（右移）</h5><p>补码的每一个对应位置右移一位</p><p>效果：数字 // 2**n</p><p>数字整除2的n次方(除不尽时，取小，注意负数)</p><pre class=" language-markdown"><code class="language-markdown">4 >> 1  ->  4 // 2 <span class="token bold"><span class="token punctuation">**</span> 1 = 29 >> 2  ->  9 // 2 <span class="token punctuation">**</span></span> 2 = 2-9 >> 1  ->  -9 // 2 ** 1 = -5</code></pre><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><p>python代码默认情况下是从第一行开始，从上往下依次执行<br>分支结构：某段代码是否执行看条件</p><p>python中只有一种分支结构：if 语句</p><p>其他语言里一般有两种：if、switch</p><h3 id="1-if-结构"><a href="#1-if-结构" class="headerlink" title="1. if 结构"></a>1. if 结构</h3><h5 id="1）语法："><a href="#1）语法：" class="headerlink" title="1）语法："></a>1）语法：</h5><pre class=" language-markdown"><code class="language-markdown">if 条件语句：<span class="token code keyword">    代码段</span></code></pre><h5 id="2）说明-1"><a href="#2）说明-1" class="headerlink" title="2）说明"></a>2）说明</h5><p>if  -  关键字，固定写法</p><p>条件语句  -  任何有结果的表示都可以</p><p>：  -  固定写法（出现冒号的位置，后面一般会换行产生缩进）</p><p>代码段  -  和if保持一个缩进的语句（分支代码段，即满足条件才执行的）</p><h5 id="3）执行过程"><a href="#3）执行过程" class="headerlink" title="3）执行过程"></a>3）执行过程</h5><p>先判断条件语句的结果是否为True（如果条件语句的结果不是布尔值，就先转换为布尔值）</p><p>如果是True，则执行代码段，否则不执行</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">if</span> num <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'偶数'</span><span class="token punctuation">)</span></code></pre><p>相当于： 如果…就…</p><h3 id="2-if-else-结构"><a href="#2-if-else-结构" class="headerlink" title="2. if  - else 结构"></a>2. if  - else 结构</h3><pre class=" language-markdown"><code class="language-markdown">if 条件语句：<span class="token code keyword">    代码段1</span>else:<span class="token code keyword">    代码段2</span></code></pre><p>满足条件执行代码段1，不满足执行代码段2</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">if</span> num <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'偶数'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'奇数'</span><span class="token punctuation">)</span></code></pre><p>相当于： 如果…就…否则…</p><p>课堂练习：成年未成年</p><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入年龄: '</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> age <span class="token operator">></span> <span class="token number">130</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'年龄输入有误，请重新输入'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'未成年'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'成年'</span><span class="token punctuation">)</span></code></pre><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""1. 写出判断一个数是否能同时被3和7整除的条件语句,     并且打印对应的结果"""</span>num1 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入整数： '</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断输入的数据是否可以转为整型，若不是，打印警告</span>    num1 <span class="token operator">=</span> int<span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n铁憨憨，让你输整数，你非要皮一下'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> num1 <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> num1 <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该数可以同时被3和7整除，商分别是：%d, %d'</span>              <span class="token operator">%</span> <span class="token punctuation">(</span>num1 <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> num1 <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该数不能同时被3和7同时整除'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""2. 写出判断一个数是否能够被3或者7整除，    但是不能同时被3和7整除，    并且打印对应的结果"""</span>num2 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入整数： '</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断输入的数据是否可以转为整型，若不是，打印警告</span>    num2 <span class="token operator">=</span> int<span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n铁憨憨，让你输整数，你非要皮一下'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    check_3_or_7 <span class="token operator">=</span> num2 <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> num2 <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span>    check_3_and_7 <span class="token operator">=</span> num2 <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> num2 <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span>    <span class="token keyword">if</span> check_3_or_7 <span class="token operator">and</span> <span class="token operator">not</span> check_3_and_7<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该数满足要求'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该数不满足要求'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''3. 输入年，写代码判断输入的年是否是闰年，    如果是输出'闰年',否则输出'不是闰年''''</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    year <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入公历年份(输入q退出)： '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> year <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断输入的数据是否可以转为整型，若不是，打印警告</span>            year <span class="token operator">=</span> int<span class="token punctuation">(</span>year<span class="token punctuation">)</span>            <span class="token keyword">if</span> year <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> ValueError        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n铁憨憨，让你输公历年份，你非要皮一下，重来！\n'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            check_4 <span class="token operator">=</span> year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span>            check_100 <span class="token operator">=</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span>            check_400 <span class="token operator">=</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span>            <span class="token keyword">if</span> check_4<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> check_100<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'闰年'</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> check_400<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'世纪闰年'</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不是闰年'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不是闰年'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""4. 今天上课讲了15000秒的课，编程计算今天上课时间是多少小时，     多少分钟，多少秒；以‘XX时XX分XX秒’的方式表示。     例如: 时间67秒  —> 0时1分7秒"""</span>time <span class="token operator">=</span> <span class="token number">15000</span>s <span class="token operator">=</span> time <span class="token operator">%</span> <span class="token number">60</span>m <span class="token operator">=</span> <span class="token punctuation">(</span>time <span class="token operator">//</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">60</span>h <span class="token operator">=</span> time <span class="token operator">//</span> <span class="token number">60</span> <span class="token operator">//</span> <span class="token number">60</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n%d时%d分%d秒\n'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>h<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""5. 定义两个变量保存一个人的身高和体重，     编程实现判断这个人的身材是否正常!     公式: 体重(kg)/身高(m)的平方值在18.5 ~ 24.9之间属于正常。"""</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    height <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入身高(m)(输入q退出)： '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> height <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断输入的数据是否可以转为浮点型，若不是，打印警告</span>            height <span class="token operator">=</span> float<span class="token punctuation">(</span>height<span class="token punctuation">)</span>            <span class="token keyword">if</span> height <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> ValueError        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n铁憨憨，让你输身高，你非要皮一下，重来！\n'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>    weight <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入体重(kg)(输入q退出)： '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> weight <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断输入的数据是否可以转为浮点型，若不是，打印警告</span>            weight <span class="token operator">=</span> float<span class="token punctuation">(</span>weight<span class="token punctuation">)</span>            <span class="token keyword">if</span> weight <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> ValueError        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n铁憨憨，让你输体重，你非要皮一下，重来！\n'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            bmi <span class="token operator">=</span> weight <span class="token operator">/</span> height <span class="token operator">**</span> <span class="token number">2</span>            <span class="token keyword">if</span> bmi <span class="token operator">&lt;</span> <span class="token number">18.5</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'偏瘦'</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bmi <span class="token operator">&lt;=</span> <span class="token number">24.9</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正常'</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bmi <span class="token operator">&lt;=</span> <span class="token number">29.9</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'偏胖'</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bmi <span class="token operator">&lt;=</span> <span class="token number">34.9</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'肥胖'</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bmi <span class="token operator">&lt;=</span> <span class="token number">39.9</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'重度肥胖'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'极重度肥胖'</span><span class="token punctuation">)</span></code></pre><pre class=" language-markdown"><code class="language-markdown">6.位运算练习题1）表达式0x13 &amp; 0x17的值(19)2）表达式0x13 | 0x17的值(23)3）表达式0x13 ^ 0x17的值(4)4)  若x=12,y=13则x&amp;y的结果是（12）5) 在位运算中，操作数每右移一位，其结果相当于（B）  A.操作数乘以2     B.操作数除以2 C.操作数除以4     D.操作数乘以46).设x 是一个整数（16bit）.若要通过x|y使x低度8位置1，高8位不变，则y的二进制数是（0000000011111111）</code></pre><h1 id="作业答案from老师"><a href="#作业答案from老师" class="headerlink" title="作业答案from老师"></a>作业答案from老师</h1><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 4.输入年，写代码判断输入的年是否是闰年，如果是输出'闰年',否则输出'不是闰年'</span><span class="token comment" spellcheck="true"># 闰年的条件: 1)能被4整除但是不能被100整除 2)能被400整除</span>year <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入年份:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">'是闰年'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">'不是闰年'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5.今天上课讲了15000秒的课，编程计算今天上课时间是多少小时，多少分钟，多少秒；以‘XX时XX分XX秒’的方式表示。</span><span class="token comment" spellcheck="true"># 例如: 时间67秒 —> 0时1分7秒</span>time <span class="token operator">=</span> <span class="token number">3601</span>h <span class="token operator">=</span> time <span class="token operator">//</span> <span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span>m <span class="token operator">=</span> time <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">60</span>s <span class="token operator">=</span> time <span class="token operator">%</span> <span class="token number">60</span><span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token string">"时"</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token string">'分'</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token string">'秒'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6. 定义两个变量保存一个人的身高和体重，编程实现判断这个人的身材是否正常!</span><span class="token comment" spellcheck="true"># 公式: 体重(kg)/身高(m)的平方值在18.5 ~ 24.9之间属于正常。</span>height <span class="token operator">=</span> <span class="token number">1.55</span>weight <span class="token operator">=</span> <span class="token number">50</span>value <span class="token operator">=</span> weight <span class="token operator">/</span> height<span class="token operator">**</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">18.5</span> <span class="token operator">&lt;=</span> value <span class="token operator">&lt;=</span> <span class="token number">24.9</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正常'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不正常'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法</title>
      <link href="/2019/11/13/day2-python-ji-chu-yu-fa-he-pycharm-ji-ben-kuai-jie-jian-jin-zhi-bu-ma/"/>
      <url>/2019/11/13/day2-python-ji-chu-yu-fa-he-pycharm-ji-ben-kuai-jie-jian-jin-zhi-bu-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础语法"><a href="#Python-基础语法" class="headerlink" title="Python 基础语法"></a>Python 基础语法</h1><h2 id="1-打印"><a href="#1-打印" class="headerlink" title="1. 打印"></a>1. 打印</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span></code></pre><h2 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h2><p>单行注释：用”# “隔开的，不参与编译执行的文字（不影响程序功能），专门用来对代，码进行注解和说明的，经常写注释是良好的编程习惯</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 单行注释</span></code></pre><p>多行注释：用”””  “””引起来</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""多行注释多行注释"""</span></code></pre><h2 id="3-语句"><a href="#3-语句" class="headerlink" title="3. 语句"></a>3. 语句</h2><p>一条语句占一行，一条语句结束后可以不写分号</p><p>如果一行中需要写多条语句，语句之间必须加分号</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><h2 id="4-缩进"><a href="#4-缩进" class="headerlink" title="4. 缩进"></a>4. 缩进</h2><p>python中一条语句的开头不能随便加缩进(tab / 4*space)或空格</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">10</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10大于1'</span><span class="token punctuation">)</span></code></pre><h2 id="5-标识符"><a href="#5-标识符" class="headerlink" title="5. 标识符"></a>5. 标识符</h2><p>标识符是专门用来给变量、函数、类等命名的</p><p>标识符的命名规范：</p><p>1）由字母、数字或者下划线_组成(在Python3中，其实汉字、日语、汉语等也可以作为标识符，但是强烈不推荐)</p><p>2）数字不能开头</p><h2 id="6-关键字"><a href="#6-关键字" class="headerlink" title="6. 关键字"></a>6. 关键字</h2><p>在Python中有特殊功能或者特殊意义的标识符就是关键字，又叫保留字</p><p>获取关键字的语句：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> keyword<span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span></code></pre><p>结果如下：</p><pre class=" language-markdown"><code class="language-markdown">35['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']</code></pre><p>改版本python共有35个关键字</p><h2 id="7-常用数据"><a href="#7-常用数据" class="headerlink" title="7. 常用数据"></a>7. 常用数据</h2><p>1）数字数据：用来表达大小的数据就是数字数据，在程序中直接写即可（支持科学计数法、复数(虚数单位为j)）</p><pre class=" language-python"><code class="language-python"><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token operator">-</span><span class="token number">0.2</span> <span class="token operator">+</span> <span class="token number">0.8</span><span class="token number">2e3</span> <span class="token operator">+</span> <span class="token number">1e2</span>  <span class="token comment" spellcheck="true"># 科学计数法 2000 + 100</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5j</span>  <span class="token comment" spellcheck="true"># 复数，j时必须写成1j</span></code></pre><p>2）文本数据(字符串)：文本信息对应的数据，在程序中需要用引号引起来</p><pre class=" language-python"><code class="language-python"><span class="token string">'I love Python!'</span><span class="token string">"I love Python!"</span></code></pre><p>3）布尔数据：用True表示真/肯定，用False表示假/否定</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h2 id="8-常见的数据类型"><a href="#8-常见的数据类型" class="headerlink" title="8. 常见的数据类型"></a>8. 常见的数据类型</h2><p>通过不同的数据类型对数据进行分类</p><p>整型(int)</p><p>浮点型(float)</p><p>字符串(str)</p><p>布尔(bool)</p><p>列表(list)</p><p>字典(dict)</p><p>元组(tuple)</p><p>集合(set)</p><p>字节(bytes)</p><p>函数(function)</p><p>三大神器：迭代器(iter)、生成器、装饰器</p><p>…</p><pre class=" language-python"><code class="language-python">type<span class="token punctuation">(</span>数据<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取数据的数据类型</span></code></pre><h2 id="9-输入与输出函数"><a href="#9-输入与输出函数" class="headerlink" title="9. 输入与输出函数"></a>9. 输入与输出函数</h2><p>1）输出函数：print()</p><p>括号里可以写表达式，打印其结果</p><p>同时打印多个表达式：表达式之间可以用逗号隔开</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'打印内容'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'lll'</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span></code></pre><p>a. 定制换行</p><p>默认情况下，一个print()中的内容会在一行打印</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello world'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span></code></pre><p>结果为:</p><pre class=" language-markdown"><code class="language-markdown">Hello world;aaa</code></pre><p>print()函数的end参数默认是回车，上面手动定义为分号，所以可以做到不换行打印</p><p>b. 定制分离</p><p>默认情况下，一个print()打印多个内容的时候，多个内容之间用空格分开</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">)</span></code></pre><p>结果为：</p><pre class=" language-markdown"><code class="language-markdown">1+2+3+4</code></pre><p>print()函数的sep参数默认是空格，上面手动定义为加号，所以可以做到如上效果</p><p>2）输入函数：input() - 返回输入内容的字符串</p><p>接输入内容的变量 = input(输入提示信息)</p><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入年龄： '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你今年'</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'岁了！'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>当程序执行到input时，会暂停下来等输入，按下回车表示输入完成</p><p>结果：</p><pre class=" language-mark"><code class="language-mark">请输入年龄： 18你今年18岁了<class 'str'></code></pre><p>str表示输入函数所返回的数据类型是字符串</p><h1 id="Pycharm基本快捷键"><a href="#Pycharm基本快捷键" class="headerlink" title="Pycharm基本快捷键"></a>Pycharm基本快捷键</h1><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Shift + Enter</td><td align="center">快速插入下一行</td></tr><tr><td align="center">Ctrl + P</td><td align="center">代码提示（在print（）括号里）</td></tr><tr><td align="center">Ctrl + Alt + Space</td><td align="center">代码提示（输print输到一半不会拼写了）</td></tr><tr><td align="center">Shift + Tab</td><td align="center">逆缩进</td></tr><tr><td align="center">Alt + Enter</td><td align="center">万能键</td></tr><tr><td align="center">Ctrl + /</td><td align="center">注释/取消注释</td></tr><tr><td align="center">Ctrl + F11</td><td align="center">订上/书签</td></tr><tr><td align="center">Ctrl + 书签号</td><td align="center">到某书签的位置</td></tr><tr><td align="center">Shift + F11</td><td align="center">展示所有书签</td></tr><tr><td align="center">Ctrl + Shift + F</td><td align="center">全局查找</td></tr><tr><td align="center">Ctrl + Shift + R</td><td align="center">全局替换</td></tr><tr><td align="center">Ctrl + 鼠标左键</td><td align="center">简介</td></tr><tr><td align="center">Ctrl + R</td><td align="center">替换</td></tr><tr><td align="center">Ctrl + Shift + 小键盘+</td><td align="center">展开全部代码块</td></tr><tr><td align="center">Ctrl + Shift + 小键盘-</td><td align="center">收缩全部代码块</td></tr><tr><td align="center">按住Ctrl + 鼠标悬停在函数上</td><td align="center">显示函数信息，参数等</td></tr><tr><td align="center">将光标放在选区起始位置，按住SHIFT，在点击结束位置</td><td align="center">区域选择</td></tr><tr><td align="center">按住alt键，鼠标单机新建光标位置</td><td align="center">多光标操作</td></tr></tbody></table><h1 id="进制（原码反码和补码）"><a href="#进制（原码反码和补码）" class="headerlink" title="进制（原码反码和补码）"></a>进制（原码反码和补码）</h1><p>数字在编程中有四种表示方式：</p><p>十进制、二进制、八进制、十六进制</p><h2 id="1-十进制"><a href="#1-十进制" class="headerlink" title="1. 十进制"></a>1. 十进制</h2><p>1）基数：0,1,2,3,4,5,6,7,8,9</p><p>2）进位：逢10进1</p><p>3）位权：123 = 1*10^2 + 2*10^1 + 3*10^0</p><p>4）表示方式(Python)：直接写</p><pre class=" language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">123</span></code></pre><h2 id="2-二进制"><a href="#2-二进制" class="headerlink" title="2. 二进制"></a>2. 二进制</h2><p>1）基数：0,1</p><p>2）进位：逢2进1</p><p>3）位权：1011(2) = 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0</p><p>4）表示方式(Python)：二进制数前加0b/0B</p><pre class=" language-python"><code class="language-python">num2 <span class="token operator">=</span> <span class="token number">0b1011</span></code></pre><h2 id="3-八进制"><a href="#3-八进制" class="headerlink" title="3. 八进制"></a>3. 八进制</h2><p>1）基数：0,1,2,3,4,5,6,7</p><p>2）进位：逢8进1</p><p>3）位权：5061(8) = 5*8^3 + 0*8^2 + 6*8^1 + 1*8^0</p><p>4）表示方式(Python)：八进制数前加0o/0O</p><pre class=" language-python"><code class="language-python">num3 <span class="token operator">=</span> <span class="token number">0o5061</span></code></pre><h2 id="4-十六进制"><a href="#4-十六进制" class="headerlink" title="4. 十六进制"></a>4. 十六进制</h2><p>1）基数：0,1,2,3,4,5,6,7,8,9,a(10),b(11),c(12),d(13),e(14),f(15)</p><p>2）进位：逢16进1</p><p>3）位权：1f(16) = 1*16^1 + 15*16^0</p><p>4）表示方式(Python)：十六进制数前加0x/0X</p><pre class=" language-python"><code class="language-python">num4 <span class="token operator">=</span> <span class="token number">0x1f</span></code></pre><h2 id="5-进制之间的相互转换"><a href="#5-进制之间的相互转换" class="headerlink" title="5. 进制之间的相互转换"></a>5. 进制之间的相互转换</h2><h3 id="方法一：-自己算"><a href="#方法一：-自己算" class="headerlink" title="方法一： 自己算"></a>方法一： 自己算</h3><p>1）十进制转换为其他进制</p><p>辗转取余法自己算</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1572946820173&di=ce378aeb1cbbb665e7b98910b4a257d5&imgtype=jpg&src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D3124073601%2C2617037677%26fm%3D214%26gp%3D0.jpg" alt="辗转取余法"></p><p>图片来源于网络</p><p>2）其他的进制转十进制</p><p>累计求和法自己算</p><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1499129724,3825854877&fm=26&gp=0.jpg" alt="累计求和法"></p><p>图片来源于网络</p><p>3）二进制、八进制、十六进制之间的相互转换</p><p>a. 二转八: </p><p>从最低位开始，三位一转</p><p>1011011 :  011 -&gt; 3, 011 -&gt; 3, 1 -&gt; 1 ;  即133</p><p>b. 二转十六: </p><p>从最低位开始，四位一转</p><p>c. 八转二：</p><p>从最高位开始，三位一转</p><p>d. 十六转二：</p><p>从最高位开始，四位一转</p><p>e. 八转十六或十六转八</p><p>先转成2进制，再转</p><h3 id="方法二：-Python"><a href="#方法二：-Python" class="headerlink" title="方法二：  Python"></a>方法二：  Python</h3><p>各进制英文单词的前三个字母，记不住可查字典</p><p>转二进制：bin(数字)</p><p>转八进制：oct(数字)</p><p>转十六进制：hex(数字)</p><pre class=" language-python"><code class="language-python">num1 <span class="token operator">=</span> bin<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>num2 <span class="token operator">=</span> oct<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>num3 <span class="token operator">=</span> hex<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-markdown"><code class="language-markdown">0b1100100 0o144 0x64</code></pre><h2 id="6-原码反码补码"><a href="#6-原码反码补码" class="headerlink" title="6. 原码反码补码"></a>6. 原码反码补码</h2><p>正数的原码、反码、补码是一样的，都是原码</p><p>计算机底层存储数据只能存数字，并且存的是数字的补码，运算也利用的补码</p><p>计算机内存大小(最小单位是位)：</p><pre class=" language-markdown"><code class="language-markdown">1 bytes(字节) = 8 bit(位)1 Kb = 1024 bytes1 Mb = 1024 kb1 Gb = 1024 Mb1 Tb = 1024 Gb</code></pre><p>向计算机申请内存时，最小的申请单位是1字节，所以原码位数都是8的倍数</p><p>强语言(C、Java等)在申请内存时，很容易造成内存浪费/溢出</p><p>弱语言(Python等)是动态申请的，需要多少申请多少。所以python可以计算9999**9999。</p><p>1）原码</p><p>原码 = 符号位 + 数字对应的二进制</p><p>即在数字的二进制的最前面加上符号位</p><p>符号位上0表示正，1表示负</p><pre class=" language-markdown"><code class="language-markdown">10(10) -> 1010(2)原码：00001010-10(10) -> 10001010(原码)</code></pre><p>2）反码</p><p>反码就是原码的符号位不变，其他位全部取反</p><pre class=" language-markdown"><code class="language-markdown">-10 -> 10001010(原码)反码：11110101</code></pre><p>反码存在的意义就是计算补码</p><p>3）补码</p><p>补码就是反码加1</p><pre class=" language-markdown"><code class="language-markdown">-10 -> 11110110(补码)</code></pre><p>课堂练习：求130 和 -130 的原码反码补码</p><pre class=" language-markdown"><code class="language-markdown">1300000000010000010  原码0000000010000010  反码0000000010000010  补码-1301000000010000010  原码1111111101111101  反码1111111101111110  补码</code></pre><p>切记：正数的三码都一样！！！！！！！！</p><p>为什么计算机只存补码？</p><pre class=" language-markdown"><code class="language-markdown">计算机只有加法器，不能进行直接的减法运算3 + 2 = 53：00000011(原码)2：00000010(原码)00000011 + 00000010 = 000001013 - 2 = 13：00000011(原码)-2：10000010(原码)若直接原码加：00000011 + 10000010 = 10000101结果是10000101 = -5  错误！！！补码计算：3：00000011(补码)-2：11111110(补码)00000011 + 11111110 = 00000001(补码)(由于是两个1字节相加，所以结果只能是1字节，高出的舍弃)结果是1  正确！！！</code></pre><p>同样切记：正数的三码都一样！！！！！！！！！</p><p>课堂练习：-130 + 20</p><pre class=" language-markdown"><code class="language-markdown">-1301000000010000010  原码1111111101111101  反码1111111101111110  补码2000010100  原码、反码、补码1111111101111110 +0000000000010100 =1111111110010010  (补码)1111111110010001  (反码)1000000001101110  (原码)结果是-110</code></pre>]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 教程</title>
      <link href="/2019/11/05/markdown-yu-fa-jie-shao/"/>
      <url>/2019/11/05/markdown-yu-fa-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-教程"><a href="#Markdown-教程" class="headerlink" title="Markdown 教程"></a>Markdown 教程</h1><p>轻量级标记语言</p><h2 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a>一、基础语法</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h3><a id="more"></a><p>对应的 HTML 元素: <code>&lt;h&gt;</code></p><p>写法:</p><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><p>显示效果：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h3 id="2-正文"><a href="#2-正文" class="headerlink" title="2. 正文"></a>2. 正文</h3><h4 id="2-1-段落"><a href="#2-1-段落" class="headerlink" title="2.1 段落"></a>2.1 段落</h4><p>对应的 HTML 元素: <code>&lt;p&gt;</code></p><p>写法:</p><pre><code>阿斯顿发生地方阿斯顿交话费啦阿斯顿发生地方阿斯顿交话费啦</code></pre><p>显示效果：</p><p>阿斯顿发生地方<br>阿斯顿交话费啦</p><p>阿斯顿发生地方<br>阿斯顿交话费啦</p><h4 id="2-2-加粗"><a href="#2-2-加粗" class="headerlink" title="2.2 加粗"></a>2.2 加粗</h4><p>对应的 HTML 元素: <code>&lt;strong&gt;</code></p><p>写法:</p><pre><code>阿斯顿发个号 **Python** 趣味儿童阿斯顿发个号 __Python__ 趣味儿童</code></pre><p>显示效果：</p><p>阿斯顿发个号 <strong>Python</strong> 趣味儿童<br>阿斯顿发个号 <strong>Python</strong> 趣味儿童 (对 Python 文档，不太推荐)</p><h4 id="2-3-斜体"><a href="#2-3-斜体" class="headerlink" title="2.3 斜体"></a>2.3 斜体</h4><p>对应的 HTML 元素: <code>em</code></p><p>写法:</p><pre><code>伟大的 *Python* 崛起！伟大的 _Python_ 崛起！</code></pre><p>显示效果：</p><p>伟大的 <em>Python</em> 崛起！<br>伟大的 <em>Python</em> 崛起！</p><h4 id="2-4-链接"><a href="#2-4-链接" class="headerlink" title="2.4 链接"></a>2.4 链接</h4><p>对应的 HTML 元素: <code>&lt;a&gt;</code></p><h5 id="2-4-1-网址链接"><a href="#2-4-1-网址链接" class="headerlink" title="2.4.1 网址链接"></a>2.4.1 网址链接</h5><p>Python 的官网是: <a href="https://python.org/" target="_blank" rel="noopener">https://python.org/</a></p><h5 id="2-4-2-带名字的链接"><a href="#2-4-2-带名字的链接" class="headerlink" title="2.4.2 带名字的链接"></a>2.4.2 带名字的链接</h5><p>写法:</p><pre><code>伟大的 [Python](https://python.org/) 崛起！</code></pre><p>显示效果：</p><p>伟大的 <a href="https://python.org/" target="_blank" rel="noopener">Python</a> 崛起！</p><h3 id="3-图片"><a href="#3-图片" class="headerlink" title="3. 图片"></a>3. 图片</h3><p>对应的 HTML 元素: <code>img</code></p><p>写法:</p><pre><code>这是 Python 的 Logo![Python](https://www.python.org/static/img/python-logo@2x.png)</code></pre><p>显示效果：</p><p>这是 Python 的 Logo<br><img src="Markdown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D.assets/python-logo@2x.png" alt="Python"></p><h3 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4. 分割线"></a>4. 分割线</h3><p>对应的 HTML 元素: <code>hr</code></p><p>写法:</p><pre><code>阿斯顿发个号即可---自行车 v 不能买</code></pre><p>显示效果：</p><p>阿斯顿发个号即可</p><hr><p>自行车 v 不能买</p><h3 id="5-列表"><a href="#5-列表" class="headerlink" title="5. 列表"></a>5. 列表</h3><h4 id="5-1-有序列表"><a href="#5-1-有序列表" class="headerlink" title="5.1. 有序列表"></a>5.1. 有序列表</h4><p>对应的 HTML 元素: <code>&lt;ol&gt;</code></p><p>写法:</p><pre><code>1. 宫保鸡丁2. 鱼香肉丝3. 回锅肉4. 酸菜鱼</code></pre><p>显示效果：</p><ol><li>宫保鸡丁</li><li>鱼香肉丝</li><li>回锅肉</li><li>酸菜鱼</li></ol><h4 id="5-2-无序列表"><a href="#5-2-无序列表" class="headerlink" title="5.2. 无序列表"></a>5.2. 无序列表</h4><p>对应的 HTML 元素: <code>&lt;ul&gt;</code></p><p>写法:</p><pre><code>- 宫保鸡丁- 鱼香肉丝- 回锅肉- 酸菜鱼</code></pre><p>显示效果：</p><ul><li>宫保鸡丁<ul><li>鸡肉<ul><li>四两</li></ul></li><li>油</li><li>盐<ul><li>5克</li></ul></li></ul></li><li>鱼香肉丝<ol><li>阿斯顿发</li><li>阿斯顿发</li><li>阿斯顿发生地方</li></ol></li><li>回锅肉</li><li>酸菜鱼</li></ul><h4 id="5-3-任务清单"><a href="#5-3-任务清单" class="headerlink" title="5.3. 任务清单"></a>5.3. 任务清单</h4><ul><li><input disabled="" type="checkbox"> 宫保鸡丁</li><li><input checked="" disabled="" type="checkbox"> 鱼香肉丝</li><li><input checked="" disabled="" type="checkbox"> 回锅肉</li><li><input disabled="" type="checkbox"> 酸菜鱼</li></ul><h3 id="6-引用"><a href="#6-引用" class="headerlink" title="6. 引用"></a>6. 引用</h3><p>对应的 HTML 元素: <code>&lt;blockquote&gt;</code></p><p>写法:</p><pre><code>&gt; 余婷说：&gt; 成都 Python 1905 挺好的&gt; 1906 刚来，刚觉还不错</code></pre><p>显示效果：</p><blockquote><p>余婷说：<br>成都 Python 1905 挺好的<br>1906 刚来，刚觉还不错</p></blockquote><h3 id="7-表格"><a href="#7-表格" class="headerlink" title="7. 表格"></a>7. 表格</h3><p>对应的 HTML 元素: <code>table</code></p><p>写法:</p><pre><code>| 姓名 | 数学 | 语文 || ---- | ---- | ---- || tom  | 90   | 87   || lucy | 70   | 99   || jack | 59   | 59.9 |</code></pre><p>显示效果：</p><table><thead><tr><th>姓名</th><th>数学</th><th>语文</th></tr></thead><tbody><tr><td>tom</td><td>90</td><td>87</td></tr><tr><td>lucy</td><td>70</td><td>99</td></tr><tr><td>jack</td><td>59</td><td>59.9</td></tr></tbody></table><h3 id="8-代码"><a href="#8-代码" class="headerlink" title="8. 代码"></a>8. 代码</h3><h4 id="1-行内代码"><a href="#1-行内代码" class="headerlink" title="1. 行内代码"></a>1. 行内代码</h4><p>示例：</p><p>python 中使用 <code>return</code> 来返回函数值</p><p>markdown 里可以直接使用 <code>&lt;img&gt;</code> 标签</p><h4 id="2-代码块"><a href="#2-代码块" class="headerlink" title="2. 代码块"></a>2. 代码块</h4><p>对应的 HTML 元素: <code>&lt;pre&gt;&lt;code&gt;</code></p><p>显示效果：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>asdfadsf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="二、一些技巧"><a href="#二、一些技巧" class="headerlink" title="二、一些技巧"></a>二、一些技巧</h2><h3 id="1-文本中显示特殊字符-n"><a href="#1-文本中显示特殊字符-n" class="headerlink" title="1. 文本中显示特殊字符 \n"></a>1. 文本中显示特殊字符 <code>\n</code></h3><h3 id="2-文本颜色"><a href="#2-文本颜色" class="headerlink" title="2. 文本颜色"></a>2. 文本颜色</h3><p>伟大的 <span style="color:red">Python</span> 崛起！</p><h3 id="3-列表项目中的小段落"><a href="#3-列表项目中的小段落" class="headerlink" title="3. 列表项目中的小段落"></a>3. 列表项目中的小段落</h3><ul><li><p>asdfadsf</p><p>12323rqwe<br>asdfasdf</p><p>asdfasdf<br>asdfadf</p></li><li><p>asdfasdfa</p></li></ul><h3 id="4-工具推荐"><a href="#4-工具推荐" class="headerlink" title="4. 工具推荐"></a>4. 工具推荐</h3><ol><li>VS Code</li><li>Typora</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pygame简单说明</title>
      <link href="/2019/11/03/pygame-self/"/>
      <url>/2019/11/03/pygame-self/</url>
      
        <content type="html"><![CDATA[<h1 id="pygame简单说明"><a href="#pygame简单说明" class="headerlink" title="pygame简单说明"></a>pygame简单说明</h1><h2 id="1-游戏最小循环"><a href="#1-游戏最小循环" class="headerlink" title="1. 游戏最小循环"></a>1. 游戏最小循环</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pygame<span class="token triple-quoted-string string">"""1. 初始化游戏"""</span>pygame<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""2. 创建游戏窗口"""</span><span class="token comment" spellcheck="true"># 1) 创建窗口</span>screen <span class="token operator">=</span> pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2) 设置窗口颜色</span>screen<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3) 设置窗口标题</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_caption<span class="token punctuation">(</span><span class="token string">'红红火火'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4) 第一次显示屏幕（第一次用flip, 以后在主循环中用update）</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>flip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""游戏主循环"""</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 检测事件, 尽量再创建一个game_function.py, 在其中写函数</span>    gf<span class="token punctuation">.</span>chet_event<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 刷新页面</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="2-图片相关操作"><a href="#2-图片相关操作" class="headerlink" title="2. 图片相关操作"></a>2. 图片相关操作</h2><h3 id="1-，2-，3-略"><a href="#1-，2-，3-略" class="headerlink" title="1.，2.，3.略"></a>1.，2.，3.略</h3><h3 id="4-图片缩放和旋转"><a href="#4-图片缩放和旋转" class="headerlink" title="4. 图片缩放和旋转"></a>4. 图片缩放和旋转</h3><p>1) 缩放：pygame.transform.scale(缩放对象，目标大小) - 返回缩放后的图片对象</p><pre class=" language-python"><code class="language-python">pic_tr1 <span class="token operator">=</span> pygame<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>scale<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>2) 按比例缩放（带旋转）：pygame.transform.rotozoom(缩放对象，旋转角度，缩放比例)</p><pre class=" language-python"><code class="language-python">pic_tr2 <span class="token operator">=</span> pygame<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotozoom<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">)</span></code></pre><h2 id="3-文字相关操作"><a href="#3-文字相关操作" class="headerlink" title="3. 文字相关操作"></a>3. 文字相关操作</h2><h3 id="1-加载字体"><a href="#1-加载字体" class="headerlink" title="1. 加载字体"></a>1. 加载字体</h3><p>pygame.font.Font(字体文件，字体大小) - 返回一个字体对象</p><pre class=" language-python"><code class="language-python">font1 <span class="token operator">=</span> pygame<span class="token punctuation">.</span>font<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token string">'./img/dd.ttf'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><h3 id="2-根据字体对象创建文字对象"><a href="#2-根据字体对象创建文字对象" class="headerlink" title="2. 根据字体对象创建文字对象"></a>2. 根据字体对象创建文字对象</h3><p>字体对象.render(文字内容，True，文字颜色，文字背景颜色 = None) - 返回一个类型是Surface</p><pre class=" language-python"><code class="language-python">text <span class="token operator">=</span> font1<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3-显示文字对象"><a href="#3-显示文字对象" class="headerlink" title="3. 显示文字对象"></a>3. 显示文字对象</h3><pre class=" language-python"><code class="language-python">screen<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="4-获取文字对象大小"><a href="#4-获取文字对象大小" class="headerlink" title="4. 获取文字对象大小"></a>4. 获取文字对象大小</h3><pre class=" language-python"><code class="language-python">w<span class="token punctuation">,</span> h <span class="token operator">=</span> text<span class="token punctuation">.</span>get_size<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="5-缩放和旋转"><a href="#5-缩放和旋转" class="headerlink" title="5. 缩放和旋转"></a>5. 缩放和旋转</h3><p>同图片缩放和旋转</p><h2 id="4-绘图"><a href="#4-绘图" class="headerlink" title="4. 绘图"></a>4. 绘图</h2><p>主要运用pygame.draw模块</p><h3 id="1-画线段"><a href="#1-画线段" class="headerlink" title="1. 画线段"></a>1. 画线段</h3><p>pygame.draw.line(画在哪, 线段的颜色, 起点坐标, 终点坐标, 线宽=1)</p><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span></code></pre><p>画折线</p><p>pygame.draw.lines(画在哪, 颜色, 是否闭合, 点列表, 线宽=1)</p><pre class=" language-python"><code class="language-python">points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span>pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>lines<span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> points<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></code></pre><h3 id="2-画圆"><a href="#2-画圆" class="headerlink" title="2. 画圆"></a>2. 画圆</h3><p>pygame.draw.circle(画在哪, 线色, 圆心坐标, 半径, 线宽=0)</p><p>线宽=0的意思是填充，其他值的时候画出来是圆环</p><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><h3 id="3-画矩形"><a href="#3-画矩形" class="headerlink" title="3. 画矩形"></a>3. 画矩形</h3><p>pygame.draw.rect(画在哪, 颜色, 矩形范围, 线宽=0)</p><p>矩形范围：(左上角x坐标, 左上角y坐标, 宽度, 高度)</p><p>线宽=0的意思是填充</p><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></code></pre><h3 id="4-画椭圆"><a href="#4-画椭圆" class="headerlink" title="4. 画椭圆"></a>4. 画椭圆</h3><p>pygame.draw.ellipse(画在哪, 颜色, 矩形范围, 线宽=0)</p><p>原理：矩形的内切圆，方法同画矩形</p><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>ellipse<span class="token punctuation">(</span>    screen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></code></pre><h3 id="5-画弧线"><a href="#5-画弧线" class="headerlink" title="5. 画弧线"></a>5. 画弧线</h3><p>原理：画椭圆的一段弧</p><p>pygame.draw.arc(画在哪, 颜色, 矩形范围, 起始弧度, 终止弧度, 线宽=1)</p><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>arc<span class="token punctuation">(</span>    screen<span class="token punctuation">,</span>     <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token number">0</span><span class="token punctuation">,</span> pi<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></code></pre><h3 id="6-画多边形"><a href="#6-画多边形" class="headerlink" title="6. 画多边形"></a>6. 画多边形</h3><p>与画折线的区别在于此方法可填充</p><p>pygame.draw.polygon(画在哪, 颜色, 点列表, 线宽=0)</p><p>线宽=0的意思是填充</p><pre class=" language-python"><code class="language-python">points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span>pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>polygon<span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> points<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre><h2 id="5-事件"><a href="#5-事件" class="headerlink" title="5. 事件"></a>5. 事件</h2><p>事件检测循环见最小循环</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">chet_all_events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">:</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>有事件发生才进入for循环</p><p>event的type值会根据事件类型的不同而不一样。</p><h3 id="1-点击关闭按钮时-–-gt-退出游戏"><a href="#1-点击关闭按钮时-–-gt-退出游戏" class="headerlink" title="1. 点击关闭按钮时  –&gt;  退出游戏"></a>1. 点击关闭按钮时  –&gt;  退出游戏</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> pygame<span class="token punctuation">.</span>QUIT<span class="token punctuation">:</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-单击鼠标时-–-gt"><a href="#2-单击鼠标时-–-gt" class="headerlink" title="2. 单击鼠标时  –&gt;"></a>2. 单击鼠标时  –&gt;</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">elif</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> pygame<span class="token punctuation">.</span>MOUSEBUTTONDOWN<span class="token punctuation">:</span>    check_mouse_click_button<span class="token punctuation">(</span><span class="token punctuation">)</span>    check_mouse_<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_mouse_click_button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mouse_x<span class="token punctuation">,</span> mouse_y <span class="token operator">=</span> pygame<span class="token punctuation">.</span>mouse<span class="token punctuation">.</span>get_pos<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 定位鼠标单击位置</span>    <span class="token triple-quoted-string string">"""鼠标单击按钮时的响应"""</span>    <span class="token keyword">if</span> button1_s_player<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>collidepoint<span class="token punctuation">(</span>mouse_x<span class="token punctuation">,</span> mouse_y<span class="token punctuation">)</span><span class="token punctuation">:</span>       button1_s_player_action<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> check_mouse_<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mouse_x<span class="token punctuation">,</span> mouse_y <span class="token operator">=</span> pygame<span class="token punctuation">.</span>mouse<span class="token punctuation">.</span>get_pos<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 定位鼠标单击位置</span>    <span class="token triple-quoted-string string">"""鼠标单击...时的响应"""</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>当检测到鼠标操作时，event.pos是鼠标的坐标</p><p>get_pos()方法是获取事件发生时鼠标的位置</p><p>上面是按下鼠标时，还有其他的：</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""MOUSEBUTTONUP  -  鼠标松开MOUSEMOTION  -  鼠标移动"""</span></code></pre><h3 id="3-按下键盘时-–-gt"><a href="#3-按下键盘时-–-gt" class="headerlink" title="3. 按下键盘时  –&gt;"></a>3. 按下键盘时  –&gt;</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">elif</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> pygame<span class="token punctuation">.</span>KEYDOWN<span class="token punctuation">:</span>    check_keydown_events<span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_keydown_events</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""响应按下按键"""</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> pygame<span class="token punctuation">.</span>K_ESCAPE<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 按下ESC键退出游戏</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>上面是按下键盘按键时，还有其他的：</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""KEYUP  -  键盘弹起"""</span></code></pre><p>event.key是按下按键的ASSII码，用函数chr()可以将ASSII码转换为按键字母</p><p>也可以用pygame.K_xxx来判断是否按下xxx键</p><h2 id="6-音频播放"><a href="#6-音频播放" class="headerlink" title="6. 音频播放"></a>6. 音频播放</h2><h3 id="1-mixer-music模块"><a href="#1-mixer-music模块" class="headerlink" title="1. mixer_music模块"></a>1. mixer_music模块</h3><p>只能播放一个音频</p><p>pygame.mixer_music.play(循环次数)    —-&gt;    负1为无限循环</p><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>mixer_music<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 加载音频文件</span>pygame<span class="token punctuation">.</span>mixer_music<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 播放音频文件</span>pygame<span class="token punctuation">.</span>mixer_music<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 停止播放</span></code></pre><h3 id="2-Sound模块"><a href="#2-Sound模块" class="headerlink" title="2. Sound模块"></a>2. Sound模块</h3><p>能播放多个音频，返回一个播放器对象，只能播放音效，.wav文件</p><p>play(循环次数)  同上</p><pre class=" language-python"><code class="language-python">sound1 <span class="token operator">=</span> pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>Sound<span class="token punctuation">(</span><span class="token string">'path1'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 加载音频文件</span>sound2 <span class="token operator">=</span> pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>Sound<span class="token punctuation">(</span><span class="token string">'path2'</span><span class="token punctuation">)</span>sound1<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 播放音频</span>sound2<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>sound1<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 关闭音效</span>sound2<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pygame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PIL的基本使用</title>
      <link href="/2019/11/02/pil-de-shi-yong/"/>
      <url>/2019/11/02/pil-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/lyrichu/p/9124504.html" target="_blank" rel="noopener">PIL的使用</a></p><pre><code>from PIL import Image, ImageFilter, ImageDraw</code></pre><h5 id="1-加载图片"><a href="#1-加载图片" class="headerlink" title="1.加载图片"></a>1.加载图片</h5><pre><code>图片对象 = Image.open(图片地址)</code></pre><h5 id="2-使用滤镜"><a href="#2-使用滤镜" class="headerlink" title="2.使用滤镜"></a>2.使用滤镜</h5><pre class=" language-python"><code class="language-python">image1<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>滤镜效果<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""滤镜效果:ImageFilter.EMBOSS   -  浮雕效果ImageFilter.FIND_EDGES - 泼墨效果ImageFilter.SHARPEN  -  锐化滤波ImageFilter.SMOOTH  -  平滑滤波ImageFilter.EDGE_ENHANCE_MORE - 边界增强滤波（程度更深）ImageFilter.EDGE_ENHANCE - 边界增强滤波ImageFilter.DETAIL - 细节滤波ImageFilter.CONTOUR - 轮廓滤波(铅笔画)ImageFilter.BLUR - 模糊滤波"""</span></code></pre><h5 id="3-图片的剪切"><a href="#3-图片的剪切" class="headerlink" title="3.图片的剪切"></a>3.图片的剪切</h5><pre class=" language-python"><code class="language-python">图片对象<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>范围<span class="token punctuation">)</span>范围<span class="token punctuation">:</span> <span class="token punctuation">(</span>起点x坐标<span class="token punctuation">,</span>起点y坐标<span class="token punctuation">,</span> 终点x坐标，终点y坐标<span class="token punctuation">)</span></code></pre><h5 id="4-粘贴"><a href="#4-粘贴" class="headerlink" title="4.粘贴"></a>4.粘贴</h5><pre><code>图片对象1.paste(图片对象2,(x坐标，y坐标))</code></pre><h5 id="5-镜像"><a href="#5-镜像" class="headerlink" title="5.镜像"></a>5.镜像</h5><pre class=" language-python"><code class="language-python">图片对象<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>对称方式<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Image.FLIP_LEFT_RIGHT - 左右镜像</span><span class="token comment" spellcheck="true"># Image.FLIP_TOP_BOTTOM - 上下镜像</span></code></pre><h5 id="6-缩放"><a href="#6-缩放" class="headerlink" title="6.缩放"></a>6.缩放</h5><pre><code>图片对象.thumbnail((宽度, 高度))  - 自动按比例缩放</code></pre><h5 id="7-创建空白图片"><a href="#7-创建空白图片" class="headerlink" title="7.创建空白图片"></a>7.创建空白图片</h5><pre class=" language-python"><code class="language-python">Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span>模式<span class="token punctuation">,</span>图片大小<span class="token punctuation">,</span> 背景颜色<span class="token punctuation">)</span>empty <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="8-文字水印"><a href="#8-文字水印" class="headerlink" title="8.文字水印"></a>8.文字水印</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.创建一个空的图片</span>Image<span class="token punctuation">,</span>new<span class="token punctuation">(</span>模式<span class="token punctuation">,</span>图片大小<span class="token punctuation">,</span>背景颜色<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建font对象</span>ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span>字体文件<span class="token punctuation">,</span>字体大小<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.创建draw对象</span>ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>图片对象<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.画文字</span>draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>坐标<span class="token punctuation">,</span>文字<span class="token punctuation">,</span>字体对象<span class="token punctuation">,</span>文字颜色<span class="token punctuation">)</span></code></pre><h5 id="9-颜色块"><a href="#9-颜色块" class="headerlink" title="9.颜色块"></a>9.颜色块</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.创建一个图片对象(可以是空图片，也可以是已经存在的图片)</span><span class="token comment" spellcheck="true"># 2.创建Draw对象</span>ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>图片对象<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.设置点颜色</span>Draw对象<span class="token punctuation">.</span>point<span class="token punctuation">(</span>坐标<span class="token punctuation">,</span>颜色<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>turtle的基本使用</title>
      <link href="/2019/11/01/turtle-de-ji-ben-shi-yong/"/>
      <url>/2019/11/01/turtle-de-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="turtel的使用"><a href="#turtel的使用" class="headerlink" title="turtel的使用"></a>turtel的使用</h2><h5 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h5><p>1.创建画布</p><pre class=" language-python"><code class="language-python">turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>宽度<span class="token punctuation">,</span>高度<span class="token punctuation">)</span></code></pre><p>2.设置笔</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1)设置笔的颜色</span>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span>颜色<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 2)设置线宽</span>turtle<span class="token punctuation">.</span>width<span class="token punctuation">(</span>线宽<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3)设置速度</span>turtle<span class="token punctuation">.</span>speed<span class="token punctuation">(</span>速度值<span class="token punctuation">)</span>   <span class="token operator">-</span> 速度值是<span class="token number">1</span><span class="token operator">-</span><span class="token number">10</span> 和 <span class="token number">0</span></code></pre><p>3.控制笔移动</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1）向前走</span>turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>距离<span class="token punctuation">)</span><span class="token operator">|</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>距离<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2) 向后走</span>turtle<span class="token punctuation">.</span>back<span class="token punctuation">(</span>距离<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3) 移动到指定位置</span>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x坐标<span class="token punctuation">,</span> y坐标<span class="token punctuation">)</span><span class="token operator">/</span> turtle<span class="token punctuation">.</span>setx<span class="token punctuation">(</span>x坐标<span class="token punctuation">)</span> <span class="token operator">/</span> turtle<span class="token punctuation">.</span>sety<span class="token punctuation">(</span>y坐标<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4) 回到开始位置</span>turtle<span class="token punctuation">.</span>home<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>4.控制笔的方向 </p><pre class=" language-Python"><code class="language-Python"># 1)向左转turtle.left(角度)# 2)向右转turtle.right(角度)</code></pre><p>5.抬起笔和放下笔</p><pre class=" language-Python"><code class="language-Python"># 1）抬起笔turtle.up()# 2)放下笔turtle.down()</code></pre><p>6.程序一直运行<br>turtle.mainloop()</p><h5 id="2-画圆"><a href="#2-画圆" class="headerlink" title="2. 画圆"></a>2. 画圆</h5><ol><li>画圆环<pre class=" language-Python"><code class="language-Python">#1) 画一个完整的圆circle(半径)#2) 画圆环的一部分turtle.circle(半径, 角度)</code></pre></li><li>画实心圆<pre class=" language-Python"><code class="language-Python">turtle.dot(直径)</code></pre></li></ol><h5 id="3-填充"><a href="#3-填充" class="headerlink" title="3.填充"></a>3.填充</h5><pre class=" language-Python"><code class="language-Python"># 设置填充颜色turtle.fillcolor(颜色)# 开始填充turtle.begin_fill()# 结束填充turtle.end_fill()</code></pre>]]></content>
      
      
      <categories>
          
          <category> python库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> turtle </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
